/* Console driver with virtual consoles... */
	
	.text

/* Note: getoffs and getcoff assume sizes */

	.(

	.include	<65816.i65>
	.include	<chips.i65>
	.include	<con80.i65>
	.include	<termio.i65>
	.include	<syscalls.i65>
	.include	<kern.i65>
	.include	<stdio.i65>
	.include	<inter.i65>
	.include	<proc.i65>

	.(

	.abs 1
ScrP	= *
MsgP	.long 4
MsgSz	.long 4
ODone	= *
TIOUp	.long 4
ScrNum	.word 2
FNameP	.long 4
RcvID	.word 2
CursorP	.long 4
fp	.long 4
ColP	.long 4
Colour	.word 2
Par1	.word 2
Par2	.word 2
EscState .word 2
EscChar	.word 2
Parup	.word 2
Top	.word 2
Bottom	.word 2
Attr	.word 2
AnsiCol	.word 2
LineOff	.word 2

BitP	.long 4
ColP2	.long 4

Rows	.word 2
Row1	.word 2
Row2	.word 2
NumRows	.word 2
Screen	.word 2

IRQ	.word 2
Count	.word 2
Alarm	.long 4
Temp	.word 2
CursP2	.long 4
Charset	.word 2
LZ	= *-1
	.dsb 3
argc	.word 2
argv	.long 4

	.text
	!AXL
	tsc
	sec
	sbc #LZ
	tcs
	tcd
	sta OurDP
	stz HaveScr
	jsr @S_getpdir
	jsr @S_chdir
	jsr @S_makeChan
	sta ThChan
	
	lda #-1
	sta Alarm
	lda ThChan
	pha
	pea O_PROC
	pea ^scrfile
	pea !scrfile
	jsr @_open
	tsc
	clc
	adc #8
	tcs
	stx Screen
	cpx #-1
	bne gotscr
	pea ^noscreen
	pea !noscreen
	jsr @_perror
	pla
	pla
	pea 1
	jsr @_exit
	
gotscr	pea ^options
	pea !options
	pei (argv+2)
	pei (argv)
	pei (argc)
	jsr @_getopt
	!POP 10
	cpx #-1
	beq doneopt
	cpx #"b"
	beq inback
	bra gotscr
	
doneopt	pea SCRO_This
	pei (Screen)
	jsr @_scrSwitch
	pla
	pla

inback	pea ^rb
	pea !rb
	pea ^FontName
	pea !FontName
	jsr @_fopen
	!POP 8
	stx fp
	sty fp+2
	txa
	ora fp+2
	bne gotone
	
	pea ^nofont
	pea !nofont
	pea ^___stderr
	pea !___stderr
	jsr @_fprintf
	!POP 8
	pea 1
	jsr @_exit

gotone	pea SEEK_CUR
	pea 0
	pea 2
	pei (fp+2)
	pei (fp)
	jsr @_fseek
	!POP 10
		
	pei (fp+2)
	pei (fp)
	pea 0
	pea $0800
	pea 0
	pea 1
	pea ^Chars
	pea !Chars
	jsr @_fread
	!POP 16
	
	pei (fp+2)
	pei (fp)
	jsr @_fclose
	pla
	pla
	
	jsr prpChar
	jsr initScr
	lda #1
	jsr @S_retexit
	
back	lda ThChan
	jsr @S_recv
	sta RcvID
	stx MsgP
	sty MsgP+2
	lda [MsgP]
	and #$ff
	cmp #IO_OPEN
	beq isOpen
	cmp #IO_CLOSE
	beq isClose
	cmp #DMSG_USR1 ; Switch Screens
	beq isSS
	cmp #PMSG_GetScr
	beq isGS
	cmp #PMSG_LoseScr
	beq isLS
	cmp #PMSG_Alarm
	beq isAl
	cmp #IO_CONTROL
	beq isIC
	pei (RcvID)
	pei (MsgP+2)
	pei (MsgP)
	jsr @SL_process
	pla
	pla
	pla
	bra back
badMes	ldx #-1
	txy
replyMes 	
	lda RcvID
	jsr @S_reply
	bra back
	
isSS	jsr SwitchScr
	bra replyMes

isOpen	jsr doOpen
	bra replyMes

isClose	jsr doClose
	bra replyMes

isGS	jsr doGetScr
	bra replyMes
	
isLS	jsr doLoseScr
	bra replyMes

isAl	pea 0
	pea 0
	pei (Alarm)
	jsr @S_setTimer
	!POP 6
	stx Alarm
	jsr syncScr
	bra replyMes

isIC	jsr doControl
	bra replyMes

DrainIt	.(
	phy
	phd
	lda OurDP
	tcd
	cpy CurGlob
	beq gotglob
	phy
	jsr saveGlobs
	ply
	sty CurGlob
	tya
	jsr getGlobs
	
gotglob	pld
	jsr @SL_getOut
	bcs noInp
	tay
	phd
	lda OurDP
	tcd
	tya
	jsr putOnScr
	bra gotglob
noInp	ply
	phd
	lda OurDP
	tcd
	tya
	jsr setHC
	lda Alarm
	cmp #-1
	bne hasal
	jsr syncScr
hasal	pld
	ldx #1
	rtl
	.)

saveGlobs	.(
	lda CurGlob
	bmi nosave
	jsr setGlobs
	lda #-1
	sta CurGlob
nosave	rts
	.)
	
getGlobs	.(
	sta ScrNum
	jsr getCOff
	lda Screens+CONS_Screen,x
	sta CursorP
	clc
	adc #XSize*YSize
	sta ColP
	lda Screens+CONS_Screen+2,x
	sta CursorP+2
	adc #0
	sta ColP+2
	lda Screens+CONS_XPos,x
	sta XPos
	lda Screens+CONS_YPos,x
	sta YPos
	lda Screens+CONS_Coff,x
	sta COffs
	lda Screens+CONS_Colour,x
	sta Colour
	lda Screens+CONS_Par1,x
	sta Par1
	lda Screens+CONS_Par2,x
	sta Par2
	lda Screens+CONS_EscState,x
	sta EscState
	lda Screens+CONS_Parup,x
	sta Parup
	lda Screens+CONS_EscChar,x
	sta EscChar
	lda Screens+CONS_Top,x
	sta Top
	lda Screens+CONS_Bottom,x
	sta Bottom
	lda Screens+CONS_Attr,x
	sta Attr
	lda Screens+CONS_AnsiCol,x
	sta AnsiCol
	lda Screens+CONS_LineOff,x
	sta LineOff
	lda Screens+CONS_Charset,x
	sta Charset
	rts
	.)

setGlobs	.(
	pha
	jsr getCOff
	lda XPos
	sta Screens+CONS_XPos,x
	lda YPos
	sta Screens+CONS_YPos,x
	lda COffs
	sta Screens+CONS_Coff,x
	lda Colour
	sta Screens+CONS_Colour,x
	lda Par1
	sta Screens+CONS_Par1,x
	lda Par2
	sta Screens+CONS_Par2,x
	lda EscState
	sta Screens+CONS_EscState,x
	lda Parup
	sta Screens+CONS_Parup,x
	lda EscChar
	sta Screens+CONS_EscChar,x
	lda Top
	sta Screens+CONS_Top,x
	lda Bottom
	sta Screens+CONS_Bottom,x
	lda Attr
	sta Screens+CONS_Attr,x
	lda AnsiCol
	sta Screens+CONS_AnsiCol,x
	lda LineOff
	sta Screens+CONS_LineOff,x
	lda Charset
	sta Screens+CONS_Charset,x
	pla
&setHC	cmp CurVCon
	bne doneIt
	lda XPos
	sta CurPX
	lda YPos
	sta CurPY
doneIt	rts
	.)

doGetScr	.(
	lda #1
	sta HaveScr
	jsr saveGlobs
	jsr setVic
	lda CurVCon
	jsr SwitchIn2
	rts
	.)

doLoseScr	.(
	lda HaveScr
	beq nolose
	stz HaveScr
	jsr saveGlobs
	jsr @_freeRaster
	pea SCRO_Next
	pei (Screen)
	jsr @_scrSwitch
	pla
	pla
nolose	rts
	.)
			
SwitchScr	.(
	jsr saveGlobs
	lda NewCon
	sta CurVCon
&SwitchIn2	sta ScrNum
	jsr getCOff
	lda Screens+CONS_LineOff,x
	sta LineOff
	lda Screens+CONS_XPos,x
	sta CurPX
	lda Screens+CONS_YPos,x
	sta CurPY
	lda Screens+CONS_Screen,x
	sta CursorP
	clc
	adc #XSize*YSize
	sta ColP
	lda Screens+CONS_Screen+2,x
	sta CursorP+2
	adc #0
	sta ColP+2
	jsr syncScr
	rts	
	.)

doClose	.(
	rts
	.)

doOpen	.(
	pea 0
	ldx RcvID
	jsr @S_getSCOID
	txy
	ldx ThChan
	lda RcvID
	jsr @S_conChan
	pla
	rts
	.)

	.(
noscr	rts
&syncScr	
	lda HaveScr
	beq noscr
	lda ScrNum
	cmp CurVCon
	bne noscr
	stz BitP+2
	stz ColP2+2
	lda #ScrAdd
	sta ColP2
	lda #BITMAP
	sta BitP
	ldy LineOff
	lda #(XSize*YSize)/2
	sta Count
copych	lda [CursorP],y
	pha
	and #$ff
	asl
	asl
	asl
	tax
	!AS
	cpx #($20*8)
	beq nothis
	lda [ColP],y
	iny
	bra gotit
nothis	iny
	lda [ColP],y
gotit	sta [ColP2]
	!AL
	inc ColP2
	iny
	pla
	xba
	and #$ff
	asl
	asl
	asl
	sta Temp
	phy
	tay
	lda Chars+$800,x
	ora Chars,y
	sta [BitP]
	
	lda Chars+$802,x
	ora Chars+2,y
	ldy #2
	sta [BitP],y
	
	lda Chars+$804,x
	ldy Temp
	ora Chars+4,y
	ldy #4
	sta [BitP],y
	
	lda Chars+$806,x
	ldy Temp
	ora Chars+6,y
	ldy #6
	sta [BitP],y
	
	lda #8
	clc
	adc BitP
	sta BitP
	
	ply
	cpy #XSize*YSize
	bne nowrap
	ldy #0
nowrap	dec Count
	!jne copych
	rts
	.)

putOnScr	.(

	and #$ff
;	pha
;	jsr @_putchar
;	pla
	
	beq nul
	ldx EscState
	!jne isesc
	cmp #" "
	!jcs putIt
	
notPrint 
	cmp #BEL
	bne nobel
nul	rts

nobel	cmp #ESC
	bne notEsc
	lda #1
	sta EscState
	rts
	
notEsc	cmp #LF
	bne notLF
lineFeed	
	inc YPos
	lda YPos
	cmp Bottom
	bcs isSc
	cmp #YSize
	bcc noSc
isSc	jsr scroll
	dec YPos
noSc	brl XYScr

notLF	cmp #CR
	bne notCR
	stz XPos
	brl XYScr

notCR	cmp #BS
	bne notBS
	lda XPos
	beq prvLine
delag	dec XPos
	dec COffs
	lda XPos
	cmp #XSize-1
	beq delag
prvLine	rts

notBS	cmp #TAB
	bne notab
	lda XPos
	and #7
	pha
	lda #8
	sec
	sbc 1,s
moretab	sta 1,s
	lda #" "
	jsr putIt
	lda 1,s
	dec
	bne moretab
	pla
	rts
notab	cmp #14
	bne not14
	lda #1
	sta Charset
	rts
not14	cmp #15
	bne not15
	stz Charset
not15	rts
	
dohex	pha
;	!KOUT "%02x\n"
	pla
	
putIt	tax
	lda Charset
	beq nchr
	cpx #"q"
	bne nchr
	ldx #"-"
nchr	lda XPos
	cmp #XSize
	bcc okxs
	phx
	stz XPos
	jsr lineFeed
	plx
okxs	lda COffs
	clc
	adc LineOff
	cmp #XSize*YSize
	bcc yokay2
	sbc #XSize*YSize
yokay2	tay
	txa
	!AS
	sta [CursorP],y
	lda Colour
	sta [ColP],y
	!AL
	inc COffs
	inc XPos
	rts
	.)

XYScr	.(
	lda XPos
	bpl okX
	lda #0
okX	cmp #XSize
	bcc okX2
	lda #XSize-1
okX2	sta XPos
	lda YPos
	bpl okY
	lda #0
okY	cmp #YSize
	bcc okY2
	lda #YSize-1
okY2	sta YPos
	asl	; only for XSize = 80
	asl
	asl
	pha
	asl
	asl
	adc 1,s
	asl
	sta 1,s
	pla
	clc
	adc XPos
	sta COffs
	rts
	.)

scroll	.(
/*	pei (Bottom)
	pei (Top)
	KDEBUG("Top=%d,Bottom=%d^j")
	pla
	pla */
	lda Top
	bne difscr
	lda Bottom
	cmp #YSize
	bne difscr
	lda LineOff
	clc
	adc #XSize
	sta LineOff
	cmp #XSize*YSize
	bcc noLine
	stz LineOff
noLine	lda #YSize-1
	jsr getoffs
	tay
	ldx #XSize/2
clrit	lda #$2020
	sta [CursorP],y
	lda Colour
	sta [ColP],y
	iny
	iny
	dex
	bne clrit
	
&getalarm	
	lda Alarm
	cmp #-1
	bne alrgot
	pea PMSG_Alarm
	lda ThChan
	pha
	pea 0
	pea 0
	pea 50
	pea -1
	jsr @S_setTimer
	!POP 12
	stx Alarm
alrgot	rts
	
difscr	lda Bottom
	sec
	sbc Top
	sta Rows
	lda Top
	sta Row1
	lda #1
	sta NumRows
	.)
	
scrup	.(
/*	pei (NumRows)
	pei (Row1)
	pei (Rows)
	KDEBUG("Rows=%d,row1=%d,numrows=%d^j")
	pla
	pla
	pla */
	lda Rows
	sec
	sbc NumRows
	sta Rows
	lda Row1
	clc
	adc NumRows
	jsr getoffs
	sta Row2
	lda Row1
	jsr getoffs
	sta Row1
rows2go	ldx #XSize/2
copyLine	ldy Row2
	lda [CursorP],y
	ldy Row1
	sta [CursorP],y
	ldy Row2
	lda [ColP],y
	ldy Row1
	sta [ColP],y
	inc Row1
	inc Row1
	inc Row2
	inc Row2
	dex
	bne copyLine
	lda Row1
	cmp #XSize*YSize
	bcc nowr
	stz Row1
nowr	lda Row2
	cmp #XSize*YSize
	bcc nowr2
	stz Row2
nowr2	dec Rows
	bne rows2go
	ldy Row1
clrNex	ldx #XSize/2
clrLine	lda #$2020
	sta [CursorP],y
	lda Colour
	sta [ColP],y
	iny
	iny
	dex
	bne clrLine
	cpy #XSize*YSize
	bcc nowr3
	ldy #0
nowr3	dec NumRows
	bne clrNex
	brl getalarm
	.)

scrdown	.(
/*	pei (NumRows)
	pei (Row1)
	pei (Rows)
	KDEBUG("(DOWN) Rows=%d,row1=%d,numrows=%d^j")
	pla
	pla
	pla */
	lda Rows
	sec
	sbc NumRows
	sta Rows
	lda Row1
	clc
	adc Rows
	sta Row1
	jsr getoffs
	dec
	dec
	sta Row2
	lda Row1
	clc
	adc NumRows
	jsr getoffs
	dec
	dec
	sta Row1
rows2go	ldx #XSize/2
copyLine	ldy Row2
	lda [CursorP],y
	ldy Row1
	sta [CursorP],y
	ldy Row2
	lda [ColP],y
	ldy Row1
	sta [ColP],y
	dec Row1
	dec Row1
	dec Row2
	dec Row2
	dex
	bne copyLine
	lda Row1
	cmp #-2
	bne nowr
	lda #(XSize*YSize)-2
	sta Row1
nowr	lda Row2
	cmp #-2
	bne nowr2
	lda #(XSize*YSize)-2
	sta Row2
nowr2	dec Rows
	bne rows2go
	ldy Row1
clrNex	ldx #XSize/2
clrLine	lda #$2020
	sta [CursorP],y
	lda Colour
	sta [ColP],y
	dey
	dey
	dex
	bne clrLine
	cpy #-2
	bne nowr3
	ldy #(XSize*YSize)-2
nowr3	dec NumRows
	bne clrNex
	brl getalarm
	.)	

getoffs	.(
	asl	; only for XSize = 80
	asl
	asl
	pha
	asl
	asl
	adc 1,s
	asl
	adc LineOff
	cmp #XSize*YSize
	bcc yokay
	sbc #XSize*YSize
yokay	sta 1,s
	pla
	rts
	.)
	
isesc	.(
	cpx #1
	bne notfesc
	cmp #"["
	bne notPar
	lda #2
	sta EscState
	stz Par1
	stz Par2
	stz Parup
	rts
notPar	pha
	lda #-1
	sta Par1
	sta Par2
	stz EscState
	!KOUT "ESC %c\n"
	pla
	rts
notfesc	cmp #"0"
	bcc nonum
	cmp #"9"+1
	bcs nonum
	sec
	sbc #"0"
	pha
	lda Parup
	asl
	tax
	cpx #4
	bcs nopar
	lda Par1,x
	asl
	pha
	asl
	asl
	adc 1,s
	adc 3,s
	sta Par1,x
	pla
nopar	pla
	rts
nonum	cmp #";"
	bne notp2
	inc Parup
	rts
notp2	stz EscState

	;jsr debansi
	cmp #"H"
	bne notXY
	lda Par1
	bne okY
	lda #1
okY	dec
	sta YPos
	lda Par2
	bne okX
	lda #1
okX	dec
	sta XPos
	brl XYScr
	
notXY	cmp #"M"
	bne notdeli
	lda Par1
	sta NumRows
	lda Bottom
	sec
	sbc YPos
	sta Rows
	lda YPos
	sta Row1
	brl scrup
notdeli	cmp #"L"
	bne notinsl
	lda Par1
	sta NumRows
	lda Bottom
	sec
	sbc YPos
	sta Rows
	lda YPos
	sta Row1
	brl scrdown
notinsl	cmp #"K"
	bne notClr
	lda Par1
	bne no1
	lda #XSize
	sec
	sbc XPos
	sta Par1
	lda COffs
	sta Par2
	bra clrit
no1	cmp #1
	bne no2
	lda XPos
	sta Par1
	lda COffs
	sec
	sbc XPos
	sta Par2
	bra clrit
no2	cmp #2
	bne no3
	lda #XSize
	sta Par1
	lda COffs
	sec
	sbc XPos
	sta Par2
clrit	ldx Par1
	lda Par2
	clc
	adc LineOff
	cmp #XSize*YSize
	bcc nowr
	sbc #XSize*YSize
nowr	tay
	!AS
	lda #" "
goag	cpx #0
	beq nomore
	lda #" "
	sta [CursorP],y
	lda Colour
	sta [ColP],y
	dex
	iny
	cpy #XSize*YSize
	bne goag
	ldy #0
	bra goag
nomore	!AL
no3	rts
notClr	cmp #"J"
	bne notClr2
	lda Par1
	cmp #0
	bne no12
	lda #XSize*YSize
	sec
	sbc COffs
	sta Par1
	lda COffs
	sta Par2
	bra clrit
no12	cmp #1
	bne no13
	lda COffs
	sta Par1
	stz Par2
	bra clrit
no13	cmp #2
	bne no3
	lda #XSize*YSize
	sta Par1
	stz Par2
	bra clrit
notClr2	cmp #"m"
	bne nocols
	brl doemm
nocols	cmp #"r"
	bne notscr
	lda Par1
	bne nores
	stz Top
	lda #YSize
	sta Bottom
	rts
nores	lda Par1
	dec
	sta Top
	lda Par2
	sta Bottom
	rts

notscr	cmp #"A"
	bne notA
	lda Par1
	bne ndefa
	inc Par1
ndefa	lda YPos
	sec
	sbc Par1
finy	sta YPos
	brl XYScr
notA	cmp #"B"
	bne notB
	lda Par1
	bne ndefb
	lda #1
ndefb	clc
	adc YPos
	bra finy

notB	cmp #"C"
	bne notC
	lda Par1
	bne ndef
	lda #1
ndef	clc
	adc XPos
finx	sta XPos
	brl XYScr
notC	cmp #"D"
	bne notD
	lda Par1
	bne ndefd
	inc Par1
ndefd	lda XPos
	sec
	sbc Par1
	bra finx
	
notD	.(
	cmp #"P"
	bne notP
	lda Par1
	bne nzerp
	inc Par1
nzerp	lda #XSize
	sec
	sbc XPos
	cmp Par1
	bcs fine
	sta Par1
fine	ldy COffs
	lda Par1
	jsr copych
	rts
	.)
	
notP	.)

debansi	.(
	pha
	pei (Par2)
	pei (Par1)
	!KOUT "Esc Par1=%d Par2=%d Char=%c\n"
	pla
	pla
	pla
	rts
	.)	

copych	.(
	pha
	clc
	adc CursorP
	sta CursP2
	lda CursorP+2
	adc #0
	sta CursP2+2
	pla
	clc
	adc ColP
	sta ColP2
	lda ColP+2
	adc #0
	sta ColP2+2
	!AS
copy	lda [CursorP],y
	sta [CursP2],y
	lda [ColP2],y
	sta [ColP],y
	iny
	dex
	bne copy
	!AL
	rts
	.)

doemm	.(
	ldx #0
morepars	
	lda Par1,x
	bne notres
	stz Attr
	lda #6
	sta AnsiCol
	lda DefCol
	bra setcol
notres	cmp #8
	bcs notattr
	and #7
	sta Attr
	bra chacol
notattr	cmp #30
	bcc notcol
	cmp #38
	bcs notcol
	sec
	sbc #30
	!AS
	sta AnsiCol
	!AL
	bra chacol
notcol	cmp #40
	bcc notbcol
	cmp #48
	bcs notbcol
	sec
	sbc #40
	!AS
	sta AnsiCol+1
	!AL
	bra chacol
notbcol	bra nexcol
chacol	lda AnsiCol
	and #7
	tay
	lda Attr
	beq stdans
	lda AnsiBold,y
	bra savcol
stdans	lda AnsiCols,y
savcol	and #$ff
	asl
	asl
	asl
	asl
	sta Colour
	lda AnsiCol+1
	and #7
	tay
	lda AnsiCols,y
	and #$0f
	ora Colour
setcol	sta Colour
	xba
	ora Colour
	sta Colour
nexcol	inx
	inx
	dec Parup
	bmi nmore
	brl morepars
nmore	rts
	.)
	
initScr	.(
	pea B38400
	pea 25
	pea 80
	pea !TermP
	pea ^DrainIt
	pea !DrainIt
	lda ThChan
	pha
	pea 2048 	; obufsz
	pea 160 	; cbufsz
	pea 40 	; ibufsz
	pea 0 	; timeout
	pea 1 	; min
	pea 0
	pea TF_ICANON+TF_ECHO+TF_OPOST+TF_ISIG+TF_ICRLF
	pea NUMCONS
	jsr @SL_initTIO
	tsc
	clc
	adc #30
	tcs

	stz Count
moreCons	pea 0
	pea XSize*YSize*2
	jsr @_malloc
	pla
	pla
	stx CursorP
	sty CursorP+2
	stz Charset
	lda Count
	jsr getCOff
	lda CursorP
	sta Screens+CONS_Screen,x
	clc
	adc #XSize*YSize
	sta ColP
	lda CursorP+2
	sta Screens+CONS_Screen+2,x
	adc #0
	sta ColP+2	
	lda DefCol
	xba
	ora DefCol
	sta Colour
	lda #6
	sta AnsiCol
	stz Attr
	stz EscState
	stz Top
	stz LineOff
	lda #YSize
	sta Bottom	
	ldy #0
clrIt	lda #$2020
	sta [CursorP],y
	lda Colour
	sta [ColP],y
	iny
	iny
	cpy #XSize*YSize
	bcc clrIt
	lda Count
	jsr setGlobs
	lda Count
	clc
	adc #"1"
	sta @ConNum
	lda Count
	pha
	lda ThChan
	pha
	pea ^RegName
	pea !RegName
	jsr @_addName
	pla
	pla
	pla
	pla
	inc Count
	lda Count
	cmp #NUMCONS
	!jcc moreCons
	rts
	.)

setVic	.(
	!AS
	lda #1
	sta @VIC_SPRITE_EN
	lda CursCol
	sta @VIC_SPRITE_COL
	lda #$80
	sta @VIC_BASE
	lda #$c8
	sta @VIC_CR2
	lda #((SprAdd-BANK)/$40)
	sta @ScrAdd+$03f8
	!AL
	pea $3b
	jsr @_setD011
	pla
	ldx #$40-2
	lda #0
clrSpr	sta @SprAdd,x
	dex
	dex
	bpl clrSpr
	lda #$f0
	sta @SprAdd+(3*7)
	lda BackBord
	sta @VIC_BORDER
	jsr @_initKey
	jsr @_getRaster
	pea $100
	pea ^keyInt
	pea !keyInt
	jsr @_setRaster
	pla
	pla
	pla
	rts
	.)

doControl 
	.(
	ldy #MSG_Ptr
	lda [MsgP],y
	cmp #IOCTL_Font
	beq doFont
	cmp #IOCTL_ChBG
	beq doChBG
	cmp #IOCTL_ChFG
	beq doChFG
	cmp #IOCTL_ChBord
	beq doChB
	cmp #IOCTL_ChCurs
	!jeq doChC
	ldx #-1
	rts
goodc	ldx #0
	rts
	
doFont	pea $800
	ldy #MSG_Ptr+6
	lda [MsgP],y
	pha
	dey
	dey
	lda [MsgP],y
	pha
	pea ^Chars
	pea !Chars
	jsr @_memcpy
	!POP 10
	jsr prpChar
	lda HaveScr
	beq nohsc
	jsr syncScr
nohsc	bra goodc
	
doChBG	ldy #MSG_Ptr+2
	lda [MsgP],y
	and #15
	pha
	lda DefCol
	and #$f0
	ora 1,s
	sta DefCol
	pla
	bra chfgbg

doChB	ldy #MSG_Ptr+2
	lda [MsgP],y
	and #15
	!AS
	sta BackBord
	!AL
	lda HaveScr
	beq goodc2
	lda BackBord
	sta @VIC_BORDER
goodc2	ldx #0
	rts

doChFG	ldy #MSG_Ptr+2
	lda [MsgP],y
	and #15
	asl
	asl
	asl
	asl
	pha
	lda DefCol
	and #$0f
	ora 1,s
	sta DefCol
	pla
chfgbg	lda DefCol
	xba
	ora DefCol
	sta Colour
	lda #0
morec	pha
	jsr getCOff
	lda Colour
	sta Screens+CONS_Colour,x
	pla
	inc
	cmp #NUMCONS
	bcc morec
	bra goodc2

doChC	ldy #MSG_Ptr+2
	lda [MsgP],y
	and #15
	sta CursCol
	ldx HaveScr
	beq goodc2
	!AS
	sta @VIC_SPRITE_COL
	!AL
	bra goodc2

	
	.)

prpChar	.(
	ldx #0
	!AS
moreprp	stz Temp
	lda Chars,x
	asl
	rol Temp
	asl
	asl
	rol Temp
	asl
	asl
	rol Temp
	asl
	asl
	rol Temp
	lda Temp
	and #$0f
	sta Chars,x
	asl
	asl
	asl
	asl
	sta Chars+$800,x
	inx
	cpx #$800
	bcc moreprp
	!AL
	rts
	.)

	.)	
	
/* Get console structure offset 
        only for size 34	*/
 
getCOff	.(
	asl
	pha
	asl
	asl
	asl
	asl
	adc 1,s
	plx
	tax
	rts
	.)

keyInt	.(
	
	phd
	pea ^ShifDown
	pea !ShifDown
	jsr @_scanKey
	pla
	pla
	cpx #0
	beq noKey2
	cpx LastKey
	bne difkey
	dec RepTime		; check repeat time
	beq okKey
	brl noKey
okKey	lda #AftRep
	sta RepTime
	bra nold
noKey2	stz LastKey
	brl noKey
difkey	stx LastKey
	lda #BefRep
	sta RepTime
		
nold	lda ShifDown	; cbm+shift down
	cmp #2
	bne novirt
	cpx #ESC
	bne noesc
	lda ThChan
	ldx #PMSG_LoseScr
	ldy #0
	jsr @S_sendPulse
	bra noKey
noesc	cpx #"1"+NUMCONS
	bcs novirt
	cpx #"1"
	bcc novirt
	txa
	sbc #"1"
	and #$ff
	cmp NewCon
	beq noKey
	cmp CurVCon
	beq noKey
	sta NewCon
	lda ThChan
	ldx #DMSG_USR1
	ldy #0
	jsr @S_sendPulse
	bra noKey
	
novirt	ldy LastKey
	lda CurVCon
	asl
	tax
	lda TermP,x
	tcd
	lda ShifDown
	jsr @SL_addKey	
noKey	!AXS
	lda CurPY
	asl
	asl
	asl
	clc
	adc #50
	sta @VIC_SPRITE_Y
	!AL
	lda CurPX
	cmp #XSize
	bcc okxs
	lda #XSize-1
okxs	asl
	asl
	adc #24
	cmp #$100
	!AS
	sta @VIC_SPRITE_X
	lda @VIC_SPRITE_XMSB
	and #$fe
	bcc noHB
	ora #1
noHB	sta @VIC_SPRITE_XMSB
	!AXL
	pld
	rtl

	.)

RegName	.asc "/dev/con8"
ConNum	.asc "0",0
FontName .asc "4x8font",0
scrfile	.asc "/dev/screen",0
noscreen .asc "Couldn't get screen!",0
rb	.asc "rb",0

nofont	.asc "Font couldn't be found!",10,0
options	.asc "b",0
	
	.data

ShifDown .word 0
RepTime	.word 0
LastKey	.word 0

CurPX	.word 0
CurPY	.word 0	
XPos	.word 0
YPos	.word 0
COffs	.word 0
CurVCon	.word 0
NewCon	.word 0
Count	.word 0

AnsiCols .byte 0 , 2  ,5  ,8 ,6  ,4 ,3 ,12
AnsiBold .byte 11, 10 ,13 ,7 ,14 ,4 ,1 ,1
CurGlob	.word -1
DefCol	.word $30
BackBord .word $000e
CursCol	.word 1

	.bss
	
HaveScr	.word 0
ThChan	.word 0
OurDP	.word 0
TermP	.dsb 2*NUMCONS		
Screens	.dsb CONS_SIZE*NUMCONS
Chars	.dsb $1000

	.)
