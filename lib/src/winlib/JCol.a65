; When does Height and Indent get filled
; Update the struct's

	.(

	.al
	.xl
	.pic
	
	.include	<kern.i65>
	.include	<win.i65>	
	.include	<stdio.i65>
	.include	<widget.i65>
	.include	<dirent.i65>
	.include	<65816.i65>
	.include	<lcc.i65>

/*-----------------------------------------------
     Column widget
------------------------------------------------*/

&_JColInit	.(

	.abs 1
TBut	.long 4
LZ	= *-1
	.dsb 5
Self	.long 4
Parent	.long 4
Flags	.word 2
Title	.long 4
Width	.word 2
Offset	.long 4
Type	.word 2
Head	.long 4

	.text
	
	!PRO LZ
	!PRPOBJ JCol
	lda Flags
	ora #JF_Selectable
	pha
	pea WEV_Button+WEV_Boundary
	pei (Parent+2)
	pei (Parent)
	pea 80
	pei (Width)
	pea 0
	pea 0
	pei (Self+2)
	pei (Self)
	jsr @_JWinInit
	!POP 20
	ldy #JCol_Offset
	lda Offset
	sta [Self],y
	iny
	iny
	lda Offset+2
	sta [Self],y
	ldy #JCol_Head
	lda Head
	sta [Self],y
	iny
	iny
	lda Head+2
	sta [Self],y
	
	pei (Title+2)
	pei (Title)
	pea 0
	pei (Self+2)
	pei (Self)
	pea 0
	pea 0
	jsr @_JButInit
	!POP 14
	stx TBut
	sty TBut+2
	
	pea GEOM_TopRight2
	ldy #JW_YSize
	lda [TBut],y
	ldy #JCol_TitleHeight
	sta [Self],y
	pha
	pea 0
	ldy #JW_Y
	lda [TBut],y
	pha
	ldy #JW_X
	lda [TBut],y
	pha
	pei (TBut+2)
	pei (TBut)
	jsr @_JWinGeom
	!POP 14
	
	ldy #JCol_Type
	lda Type
	sta [Self],y
exeet	ldx Self
	ldy Self+2
	!POST LZ
	rtl
	.)

&_JColDraw	
	.(

	.abs 1
ItemP	.long 4
StrP	.long 4
PareP	.long 4
X	.word 2
Y	.word 2
Type	.word 2
Indent	.word 2
LZ	= *-1
	.dsb 5
Self	.long 4

	.text
	!PRO LZ
	jsr @_GfxClear
	ldy #JCol_Type
	lda [Self],y
	sta Type
	ldy #JCol_Head
	lda [Self],y
	sta PareP
	iny
	iny
	lda [Self],y
	sta PareP+2
	stz Indent
	
	ldy #JCol_TitleHeight
	lda [Self],y
	sta Y

dochild	ldy #JITEM_Children
	lda [PareP],y
	sta ItemP
	iny
	iny
	lda [PareP],y
	sta ItemP+2
	
nxone	stz X
	lda Type
	and #JColF_Indent
	beq gotx
	
	lda Indent
	asl
	asl
	asl
	sta X

	pei (Y)
	pei (X)
	jsr @_GfxSetPen
	pla
	pla
	
	ldx #0
	ldy #JITEM_Flags
	lda [ItemP],y
	and #JITEMF_Expandable
	beq goti
	inx
	lda [ItemP],y
	and #JITEMF_Expanded
	beq goti
	inx
goti	phx
	pea ^ChString
	pea !ChString
	jsr @_GfxString
	!POP 6 
	lda #8
	clc
	adc X
	sta X
	
gotx	lda Y
	clc
	adc #7
	pha
	lda X
	inc
	pha
	jsr @_GfxSetPen
	pla
	pla
	
	ldy #JW_Colours
	lda [Self],y
	pha
	jsr @_GfxSetCol
	pla
		
	ldy #JITEM_Data
	lda [ItemP],y
	sta StrP
	iny
	iny
	lda [ItemP],y
	sta StrP+2
	lda StrP
	clc
	ldy #JCol_Offset
	adc [Self],y
	sta StrP
	iny
	iny
	lda StrP+2
	adc [Self],y
	sta StrP+2
	
	lda Type
	and #JColF_MASK
	cmp #JColF_CHARS
	bne notch
	pei (StrP+2)
	pei (StrP)
	bra gotst
notch	
;	cmp #JColF_STRING
;	!jne
	ldy #2
	lda [StrP],y
	pha
	lda [StrP]
	pha
gotst	jsr @_GfxText
	pla
	pla
	
	lda Y
	clc
	adc #8
	sta Y
	ldy #JW_YSize
	cmp [Self],y
	bcs exeet
	ldy #JITEM_Flags
	lda [ItemP],y
	and #JITEMF_Expanded
	beq gonx
	lda ItemP
	sta PareP
	lda ItemP+2
	sta PareP+2
	inc Indent
	!jra dochild
	
gonx	jsr next
	!jne nxone
	ldy #JITEM_Parent
	lda [ItemP],y
	tax
	iny
	iny
	lda [ItemP],y
	sta ItemP+2
	stx ItemP
	dec Indent
	ldy #JITEM_Parent
	lda [ItemP],y
	sta PareP
	iny
	iny
	lda [ItemP],y
	sta PareP+2
	ora PareP
	!jne gonx
	
exeet	!POST LZ
	rtl
	
next	lda [ItemP]
	tax
	ldy #2
	lda [ItemP],y
	sta ItemP+2
	stx ItemP
	lda ItemP
	ldy #JITEM_Children
	cmp [PareP],y
	bne ndif
	lda ItemP+2
	iny
	iny
	cmp [PareP],y
ndif	rts
	.)

&_JColButton
	.(

	.abs 1
ItemP	.long 4
PareP	.long 4
Indent	.word 2
LZ	= *-1
	.dsb 5
Self	.long 4
Type	.word 2
X	.word 2
Y	.word 2

	.text
	!PRO LZ
	lda Type
	and #EVS_But1Down
	!jne exeet
	ldy #JCol_Head
	lda [Self],y
	sta PareP
	iny
	iny
	lda [Self],y
	sta PareP+2
	stz Indent
	
	ldy #JCol_TitleHeight
	lda Y
	sec
	sbc [Self],y
	sta Y

dochild	ldy #JITEM_Children
	lda [PareP],y
	sta ItemP
	iny
	iny
	lda [PareP],y
	sta ItemP+2
	
nxone	lda Y
	sec
	sbc #8
	sta Y
	!jmi gotline
	
	ldy #JITEM_Flags
	lda [ItemP],y
	and #JITEMF_Expanded
	beq gonx
	lda ItemP
	sta PareP
	lda ItemP+2
	sta PareP+2
	inc Indent
	!jra dochild
	
gonx	jsr next
	!jne nxone
	ldy #JITEM_Parent
	lda [ItemP],y
	tax
	iny
	iny
	lda [ItemP],y
	sta ItemP+2
	stx ItemP
	dec Indent
	ldy #JITEM_Parent
	lda [ItemP],y
	sta PareP
	iny
	iny
	lda [ItemP],y
	sta PareP+2
	ora PareP
	!jne gonx
	!jra exeet

gotline	pei (ItemP+2)
	pei (ItemP)
	!POUT "ItemP %lx\n"
	pla
	pla
	pei (ItemP+2)
	pei (ItemP)
	ldy #JW_Parent+2
	lda [Self],y
	pha
	dey
	dey
	lda [Self],y
	pha
	jsr @_JTreItemClicked
	!POP 8
exeet	!POST LZ
	rtl
	
next	lda [ItemP]
	tax
	ldy #2
	lda [ItemP],y
	sta ItemP+2
	stx ItemP
	lda ItemP
	ldy #JITEM_Children
	cmp [PareP],y
	bne ndif
	lda ItemP+2
	iny
	iny
	cmp [PareP],y
ndif	rts
	.)
		
ChString
	.byte GFX_Charset
	.long ChSet
	.byte 1,1
	.byte CHAR_Col, $b1
	.byte "%b"
	.byte CHAR_End
	.byte "%E"
	
ChSet	.dsb 8
	.byte 0,0,$7c,$6c,$47,$6c,$7c,0
	.byte 0,0,$7c,$7c,$47,$7c,$7c,0


	!PRPCLASS JCol
			
JColMethods	.(
	jmp (Methods,x)
Methods	.word _JColInit
	.word _JWinKill
	.word _JColDraw
	.word _JWinShow
	.word _JWinHandle
	.word _JWinReDraw
	.word _JWinFocus
	.word _JWinSelect
	.word _JWinKeyD
	.word _JWinAdd
	.word _JColButton
	.word _JWinMotion
	.word _JWinBound
	.word _JWinNotice
	.word _JWinGeom
	.word _JWinResize
	.word _JWinRButton
	.word _JWinChNotice
	.)

	.)
	
