	
	.text

	/* Widget library */

	.(

	.al
	.xl
	.pic
	
	.include	<kern.i65>
	.include	<win.i65>	
	.include	<stdio.i65>
	.include	<widget.i65>
	.include	<fsys.i65>
	.include	<lcc.i65>

;DEBUG	= 

&_JAppSetMain .(
	.abs 1	
LZ	= *-1
	.dsb 5
Self	.long 4
Main	.long 4
	.text
	
	!PRO LZ
	ldx #{MainWin
	jsr @S_segoff
	tax
	lda Main
	sta MainWin,x
	lda Main+2
	sta MainWin+2,x
	!POST LZ
	rtl
	
	.)
	
&_JAppDrain	.(
back	pea WIN_PollEvent
	ldx #{WCon
	jsr @S_segoff
	tax
	lda WCon,x
	pha
	jsr @_sendCon
	pla
	pla
	cpx #0
	beq out
	jsr @_JEvent
	bra back
out	rtl
	.)
	
&_JAppLoop .(

back	;jsr @_stkleft
	jsr @_JEvent
	bra back

	.)

&_JEvent	
	.(

	.abs 1
LZ	= *-1
	.dsb 5
	.text

	!PRO LZ
	pea 2048
	ldx #{AnEvent
	lda #AnEvent
	jsr @S_segptr
	pha
	phy
	pea WIN_RecvEvent
	ldx #{WCon
	jsr @S_segoff
	tax
	lda WCon,x
	pha
	jsr @_sendCon
	!POP 10
	ldx #{AnEvent
	lda #AnEvent
	jsr @S_segptr
	pha
	phy
	lda !EV_Data+2,y
	pha
	lda !EV_Data,y
	pha
	ldx #MJW_Handle
	phx
;	!POUT "Handle %d,%lx\n"
	plx
	jsr @VMC		; VMC to handle
	!POST LZ+8
	rtl

	.)

&_JWinLayout
	ldx #MJCnt_Layout
	bra VMC
&_JWinHide
	ldx #MJW_Hide
	bra VMC
&_JWinShow
	ldx #MJW_Show
	bra VMC

&_VMC	.(

; C Version of virtual method call

	lda 4,s
	tax
	lda 2,s
	sta 4,s
	lda 1,s
	sta 3,s
	pla
	.)
	
	.(

Self	= 4

&&VMCheck
	lda Self,s
	ora Self+1,s
	beq nocall
; ASM virtual method call

&&VMC	lda Self,s
	ora Self+2,s
	bne oki
	brk
oki	!AS
	lda Self+2,s
	pha
	!AL
	lda Self+1,s
	dec
	pha
nocall	rtl
	
	.)
	
&cb	.(
	txy
	bne notn
	tay
	beq isz
notn	!AS
	pha
	!AL
	dex
	phx
isz	rtl
	.)

&_JAppInit	.(

; Initialise App, open connection to win.drv

self	= 4
channel	= 8

	lda channel,s
	pha
	pea O_PROC
	pea ^winname
	pea !winname
	jsr @_open
	pla
	pla
	pla
	pla
	phx
	ldx #{WCon
	jsr @S_segoff
	tay
	lda 1,s
	sta WCon,y
	ldx #{JRootObj
	jsr @S_segoff
	tay
	pla
	sta JRootObj+JW_Con,y
	cmp #-1
	bne okgood
	pea ^nowin
	pea !nowin
	jsr @_printf
	pla
	pla
	pea 1
	jsr @_exit
okgood	lda #$5c
	sta JRootObj+JObj_VMT,y
	lda #!JWMethods
	sta JRootObj+JObj_VMT+1,y
	!AS
	lda #^JWMethods
	sta JRootObj+JObj_VMT+3,y
	!AL
	lda #320
	sta JRootObj+JW_XSize,y
	lda #200
	sta JRootObj+JW_YSize,y
	lda #0
	sta JRootObj+JW_Parent,y
	sta JRootObj+JW_Parent+2,y
	lda @DflPen
	ora @DflBack
	sta JRootObj+JW_Colours,y
	rtl
	
	.)
	
&_JNew	.(

; Initialise an object to nulls and allocate memory

	.abs 1
Self	.long 4
LZ	= *-1
	.dsb 5
Class	.long 4

	.text
	!PRO LZ
	ldy #JObjClass_ObjSize
	lda [Class],y
	pha
	pea 0
	pha
	jsr @_malloc
	!POP 4
	stx Self
	sty Self+2
	ply
	lda #0
	bra clrit
clrob	sta [Self],y
clrit	dey
	dey
	bpl clrob
	
	ldy #JObjClass_VMCode
	lda [Class],y
	sta [Self]
	iny
	iny
	lda [Class],y
	ldy #2
	sta [Self],y
	iny
	iny
	lda Class
	sta [Self],y
	iny
	iny
	lda Class+2
	sta [Self],y
	ldx Self
	ldy Self+2
	!POST LZ
	rtl
	
	.)

/* ----------------------------------------

        Overriding classes
	JSubclass

------------------------------------------*/

&_JSubclass .(

	.abs 1
MethP	.long 4
OldP	.long 4
Offset	= *
MethSz	.word 2
NewClass .long 4
LZ	= *-1
	.dsb 5
Class	.long 4
ObjSize	.word 2
Method	.word 2
Routine	.long 4
	.text

	!PRO LZ
	pea 0
	pea JWClass_SIZE
	jsr @_malloc
	!POP 4
	stx NewClass
	sty NewClass+2
	
	ldy #JObjClass_ObjSize
	lda ObjSize
	cmp #-1
	bne notm1
	lda [Class],y
notm1	sta [NewClass],y
	
	ldy #JObjClass_MethSize
	lda [Class],y
	sta [NewClass],y
	sta MethSz
	
	ldy #JObjClass_Name
	lda [Class],y
	sta [NewClass],y
	iny
	iny
	lda [Class],y
	sta [NewClass],y
	
	lda MethSz
	asl
	adc #16
	pea 0
	pha
	jsr @_balloc
	pla
	pla
	stx MethP
	sty MethP+2
	txa
	clc
	adc #$10
	tax
	tya
	adc #0
	ldy #JObjClass_VMT+2
	!AS
	sta [NewClass],y
	!AL
	dey
	dey
	txa
	sta [NewClass],y
	lda #$5c
	ldy #JObjClass_VMCode
	sta [NewClass],y
	iny
	lda MethP
	sta [NewClass],y
	iny
	iny
	!AS
	lda MethP+2
	sta [NewClass],y
	!AL
	lda #$20e2		; sep #$20
	sta [MethP]
	ldy #2
	lda #$00bf		; lda @,x
	sta [MethP],y
	lda MethP
	clc
	adc #$12
	ldy #3
	sta [MethP],y
	lda MethP+2
	adc #0
	iny
	iny
	sta [MethP],y
	ldy #6
	lda #$c248		; pha
	sta [MethP],y	; rep #$20
	ldy #8
	lda #$bf20		; lda @,x
	sta [MethP],y	; 
	lda MethP
	clc
	adc #$10
	ldy #10
	sta [MethP],y
	lda MethP+2
	adc #0
	iny
	iny
	sta [MethP],y
	ldy #13
	lda #$483a		; dec
	sta [MethP],y	; pha
	ldy #15
	lda #$6b		; rtl
	sta [MethP],y
	
	lda #^_JSubclass
	sta OldP+2
	ldy #JObjClass_VMT
	lda [Class],y
	sta OldP
	
	lda MethP
	clc
	adc #$10
	sta MethP
	bcc ninc
	inc MethP+2
ninc	ldy #0
copit2	lda [OldP],y
	sta [MethP],y
	iny
	iny
	cpy MethSz
	bcc copit2
	
	ldx #0
morem	lda Method,x
	inc
	beq donem
	dec
	tay
	lda Routine,x
	sta [MethP],y
	iny
	iny
	lda Routine+2,x
	sta [MethP],y
	txa
	clc
	adc #6
	tax
	bra morem
	
donem	ldx NewClass
	ldy NewClass+2
	!POST LZ
	rtl
	
	.)
	
/*--------------------------------------------
	Standard Widget Methods
--------------------------------------------*/
	
&_JWInit	.(

; Constructor for base class JWin
; Sets up rectangle and adds it to it's parent
	
	.abs 1
LZ	= *-1
	.dsb 5
Self	.long 4
XS	.word 2
YS	.word 2
Sense	.word 2
Flags	.word 2

	.text
	!PRO LZ
	!PRPOBJ JW
	ldx #{WCon
	jsr @S_segoff
	tax
	lda WCon,x
	ldy #JW_Con
	sta [Self],y
	ldy #JW_RegID
	lda #RID_ROOT
	sta [Self],y
	lda XS
	and #$ffff-7
	ldy #JW_XSize
	sta [Self],y
	ldy #JW_MinXS
	sta [Self],y
	ldy #JW_MaxXS
	sta [Self],y
	ldy #JW_PrefXS
	sta [Self],y
	lda YS
	and #$ffff-7
	ldy #JW_YSize
	sta [Self],y
	ldy #JW_MinYS
	sta [Self],y
	ldy #JW_MaxYS
	sta [Self],y
	ldy #JW_PrefYS
	sta [Self],y
	
	ldy #JW_Colours
	lda @DflPen
	ora @DflBack
	sta [Self],y
	
	ldy #JW_Flags
	lda Flags
	sta [Self],y
	
	ldy #JW_HideCnt
	lda #1
	sta [Self],y
	
	ldy #JW_RegFlags
	lda Flags
	tax
	and #JF_Selectable
	beq nosel
	lda #REGF_Selectable
	sta [Self],y
nosel	txa
	and #JF_Front
	beq nofront
	lda [Self],y
	ora #REGF_Front
	sta [Self],y
nofront	txa
	and #JF_Manage
	beq noman
	lda [Self],y
	ora #REGF_Managed
	sta [Self],y
noman	lda Sense
	ora #WEV_Expose
	ldy #JW_Sense
	sta [Self],y
	ldy #JW_Opaque
	lda #WEV_Draw+WEV_Expose
	sta [Self],y
exeet	ldx Self
	ldy Self+2
	!POST LZ
	rtl
	.)

&_JWKill	.(

; Destructor for JWin
; First hides it, then kills all children
; And frees the memory
	.abs 1
LZ	= *-1
	.dsb 5
Self	.long 4

	.text
	!PRO LZ
	ldy #JW_RegFlags
	lda [Self],y
	and #$ffff-REGF_Visible
	sta [Self],y
	pha
	pea EREG_Flags
	ldy #JW_RegID
	lda [Self],y
	pha
	pea WIN_EditRegion
	ldy #JW_Con
	lda [Self],y
	pha
	jsr @_sendCon
	!POP 10	
	
nomore	pei (Self+2)
	pei (Self)
	ldy #JW_Parent+2
	lda [Self],y
	pha
	dey
	dey
	lda [Self],y
	pha
	ldx #MJCnt_Remove
	jsr @VMCheck
	!POP 8
	
	ldy #JW_RegID
	lda [Self],y
	pha
	pea WIN_DelRegion
	ldy #JW_Con
	lda [Self],y
	pha
	jsr @_sendCon
	pla
	pla
	pla
	pei (Self+2)
	pei (Self)
	jsr @_free
	!POST LZ+4
	rtl

	.)

&_JRegInfo	.(

; Get region info
	.abs 1
LZ	= *-1
	.dsb 5

Region	.word 2
BufP	.long 4

	.text
	!PRO LZ
	pei (BufP+2)
	pei (BufP)
	pei (Region)
	pea WIN_InfoRegion
	ldx #{WCon
	jsr @S_segoff
	tax
	lda WCon,x
	pha
	jsr @_sendCon
	!POST 10+LZ
	rtl

	.)
	
&_JWReq	.(

; Ask to be the "Window Manager"
	.abs 1
LZ	= *-1
	.dsb 5

Self	.long 4
	.text

	!PRO LZ
	ldy #JW_RegID
	lda [Self],y
	pha
	pea WIN_ReqNotify
	ldy #JW_Con
	lda [Self],y
	pha
	jsr @_sendCon
	!POST LZ+6
	rtl

	.)
	
&_JWToFront	
	.(

	.abs 1
LZ	= *-1
	.dsb 5

Self	.long 4
	.text

	!PRO LZ
	ldy #JW_RegID
	lda [Self],y
	pha
	pea WIN_ToFront
	ldy #JW_Con
	lda [Self],y
	pha
	jsr @_sendCon
	!POST LZ+6
	rtl

	.)
	
&_JWRePare .(

; Reparent Win to another region
	.abs 1
LZ	= *-1
	.dsb 5

Self	.long 4
RegID	.word 2
	.text

	!PRO LZ
	ldy #JW_RegID
	lda [Self],y
	pha
	pei (RegID)
	pea WIN_Reparent
	ldy #JW_Con
	lda [Self],y
	pha
	jsr @_sendCon
	!POST LZ+8
	rtl

	.)

&_JWAbs .(

; Find out the absolute co-ordiantes of this Win

	.abs 1
LZ	= *-1
	.dsb 5
	
Self	.long 4
XY	.long 4
	.text
	
	!PRO LZ
	pei (XY+2)
	pei (XY)
	ldy #JW_RegID
	lda [Self],y
	pha
	pea WIN_RegAbs
	ldy #JW_Con
	lda [Self],y
	pha
	jsr @_sendCon
	!POST LZ+10
	rtl

	.)

&_JWMouFoc .(
	.abs 1
LZ	= *-1
	.dsb 5
Self	.long 4
	.text
	
	!PRO LZ
	ldy #JW_RegID
	lda [Self],y
	pha
	pea WIN_MouseFocus
	ldy #JW_Con
	lda [Self],y
	pha
	jsr @_sendCon
	!POST LZ+6
	rtl
	
	.)	

&_JWOpaque .(

	.abs 1	
LZ	= *-1
	.dsb 5

Self	.long 4
Flags	.word 2
On	.word 2
	.text

	!PRO LZ
	ldy #JW_Opaque
	lda On
	beq off
	lda Flags
	ora [Self],y
	bra chsense
off	lda Flags
	eor #-1
	and [Self],y
chsense	cmp [Self],y
	beq exeet
	sta [Self],y
	pha
	pea EREG_Opaque
	ldy #JW_RegID
	lda [Self],y
	pha
	pea WIN_EditRegion
	ldy #JW_Con
	lda [Self],y
	pha
	jsr @_sendCon
	!POP 10
exeet	!POST LZ
	rtl
	
	.)	

&_JWSense	.(
	
	.abs 1
LZ	= *-1
	.dsb 5

Self	.long 4
Flags	.word 2
On	.word 2
	.text

	!PRO LZ
	ldy #JW_Sense
	lda On
	beq off
	lda Flags
	ora [Self],y
	bra chsense
off	lda Flags
	eor #-1
	and [Self],y
chsense	cmp [Self],y
	beq exeet
	sta [Self],y
	pha
	pea EREG_Sense
	ldy #JW_RegID
	lda [Self],y
	pha
	pea WIN_EditRegion
	ldy #JW_Con
	lda [Self],y
	pha
	jsr @_sendCon
	!POP 10
exeet	!POST LZ
	rtl
	
	.)	

&_JWReqFocus	
	.(
	
	.abs 1
Parent	.long 4
LZ	= *-1
	.dsb 5

Self	.long 4
	.text

	!PRO LZ
again	/* pei (Self+2)
	pei (Self)
	!POUT "Focusing %lx\n"
	!POP 4 */
	ldy #JW_Flags
	lda [Self],y
	and #JF_Selectable
	!jeq exeet
	ldy #JW_Parent
	lda [Self],y
	sta Parent
	iny
	iny
	lda [Self],y
	sta Parent+2
	ora Parent
	!jne ispare
	ldy #JW_RegID
	lda [Self],y
	pha
	pea WIN_KeyFocus
	ldy #JW_Con
	lda [Self],y
	pha
	jsr @_sendCon
	!POP 6
	bra exeet
ispare	ldy #JW_Flags
	lda [Self],y
	and #JF_Focused
	bne exeet
	lda [Self],y
	and #JF_Selected
	bne issel
	pei (Self+2)
	pei (Self)
	pei (Parent+2)
	pei (Parent)
	jsr @_JCntSelect
	!POP 8
issel	lda Parent
	sta Self
	lda Parent+2
	sta Self+2
	!jra again
exeet	!POST LZ
	rtl
	
	.)	
	
&_JReqFocus	
	.(
	
	.abs 1
LZ	= *-1
	.dsb 5

Region	.word 2
	.text

	!PRO LZ
	pei (Region)
	pea WIN_KeyFocus
	ldx #{WCon
	jsr @S_segoff
	tax
	lda WCon,x
	pha
	jsr @_sendCon
	!POST LZ+6
	rtl
	
	.)	
	
&_JEGeom	.(

	.abs 1
LZ	= *-1
	.dsb 5
	
Region	.word 2
X	.word 2
Y	.word 2
XSize	.word 2
YSize	.word 2
	.text

	!PRO LZ
	pei (YSize)
	pei (XSize)
	pei (Y)
	pei (X)
	pea EREG_SizePos
	pei (Region)
	pea WIN_EditRegion
	ldx #{WCon
	jsr @S_segoff
	tax
	lda WCon,x
	pha
	jsr @_sendCon
	!POST LZ+16
	rtl
	
	.)

&_JShow	.(
	.abs 1
LZ	= *-1
	.dsb 5
	
Region	.word 2
	.text

	!PRO LZ
	pea REGF_Visible
	pea EREG_Flags
	pei (Region)
	pea WIN_EditRegion
	ldx #{WCon
	jsr @S_segoff
	tax
	lda WCon,x
	pha
	jsr @_sendCon
	!POST LZ+10
	rtl

	.)

&_JPost	.(
	.abs 1
LZ	= *-1
	.dsb 5
	
EveP	.word 2
DataP	.word 2

	.text

	!PRO LZ
	pei (DataP+2)
	pei (DataP)
	pei (EveP+2)
	pei (EveP)
	pea WIN_PostEvent
	ldx #{WCon
	jsr @S_segoff
	tax
	lda WCon,x
	pha
	jsr @_sendCon
	!POST LZ+12
	rtl

	.)
	
&_JWRealise
	.(
	.abs 1
PareP	.long 4
Region	.dsb REG_SIZE
LZ	= *-1
	.dsb 5

Self	.long 4
	.text

	!PRO LZ
	ldy #JW_Parent
	lda [Self],y
	sta PareP
	iny
	iny
	lda [Self],y
	sta PareP+2	
	ldy #JW_Flags
	lda [Self],y
	and #JF_Added|JF_InParent
	cmp #JF_Added
	!jeq added
	pha
	lda PareP
	ora PareP+2
	beq nopa
	pei (PareP+2)
	pei (PareP)
	jsr @_JWRealise
	!POP 4
nopa	pla
	!jne added
	ldy #JW_X
	lda [Self],y
	sta Region+REG_X
	ldy #JW_Y
	lda [Self],y
	sta Region+REG_Y
	ldy #JW_XSize
	lda [Self],y
	sta Region+REG_XSize
	ldy #JW_YSize
	lda [Self],y
	sta Region+REG_YSize
	ldy #JW_Parent
	lda [Self],y
	sta PareP
	iny
	iny
	lda [Self],y
	sta PareP+2
	ora PareP
	bne haspare
	lda #RID_ROOT
	bra gotpid
haspare	ldy #JW_RegID
	lda [PareP],y
gotpid	sta Region+REG_Parent
	ldy #JW_Sense
	lda [Self],y
	sta Region+REG_Sense
	ldy #JW_Opaque
	lda [Self],y
	sta Region+REG_Opaque
	ldy #JW_RegFlags
	lda [Self],y
	sta Region+REG_Flags		; TODO
	lda Self
	sta Region+REG_Data
	lda Self+2
	sta Region+REG_Data+2
	pea 0
	tdc
	clc
	adc #Region
	pha
	pea WIN_AddRegion
	ldy #JW_Con
	lda [Self],y
	pha
	jsr @_sendCon
	!POP 8
	txa
	ldy #JW_RegID
	sta [Self],y
/*	pha
	ldy #JW_YSize
	lda [Self],y
	pha
	ldy #JW_XSize
	lda [Self],y
	pha
	pei (Self+2)
	pei (Self)
	!POUT "Realised %lx with %d,%d,%d\n"
	!POP 10 */
	ldy #JW_Flags
	lda #JF_Added
	ora [Self],y
	sta [Self],y
added	!POST LZ
	rtl
		
	.)

&_JWShow .(
	.abs 1
LZ	= *-1
	.dsb 5

Self	.long 4
	.text

	!PRO LZ
	ldy #JW_HideCnt
	lda [Self],y
	dec
	sta [Self],y
	!jne nodraw
	ldy #JW_Flags
	lda [Self],y
	and #JF_Added|JF_InParent
	!jne alrgot
	pei (Self+2)
	pei (Self)
	jsr @_JWRealise
	!POP 4
	bra isadded
alrgot	and #JF_InParent
	beq isadded
	pei (Self+2)
	pei (Self)
	jsr @_JWReDraw
	pla
	pla
	bra nodraw
isadded	ldy #JW_RegFlags
	lda [Self],y
	ora #REGF_Visible
	pha
	pea EREG_Flags
	ldy #JW_RegID
	lda [Self],y
	pha
	pea WIN_EditRegion
	ldy #JW_Con
	lda [Self],y
	pha
	jsr @_sendCon
	!POP 10
	cpx #1
	bne nodraw
	ldy #JW_RegFlags
	lda [Self],y
	ora #REGF_Visible
	sta [Self],y
nodraw	!POST LZ
	rtl
	
	.)	
	
&_JWHide .(

	.abs 1	
LZ	= *-1
	.dsb 5

Self	.long 4
	.text
	
	!PRO LZ
	ldy #JW_HideCnt
	lda [Self],y
	bne fine
	ldy #JW_Flags
	lda [Self],y
	and #JF_Added
	bne isadd
	pei (Self+2)
	pei (Self)
	jsr @_JWReDraw
	pla
	pla
	bra didred
isadd	ldy #JW_RegFlags
	lda [Self],y
	and #$ffff-REGF_Visible
	sta [Self],y
	pha
	pea EREG_Flags
	ldy #JW_RegID
	lda [Self],y
	pha
	pea WIN_EditRegion
	ldy #JW_Con
	lda [Self],y
	pha
	jsr @_sendCon
	!POP 10
didred	ldy #JW_HideCnt
	lda [Self],y
fine	inc
	sta [Self],y
	!POST LZ
	rtl
	
	.)	

&_JWSetPen .(

	.abs 1
LZ	= *-1
	.dsb 5

Self	.long 4
PenCol	.word 2
	
	.text
	!PRO LZ
	lda PenCol
	asl
	asl
	asl
	asl
	and #$f0
	pha
	ldy #JW_Colours
	lda [Self],y
	and #$0f
	ora 1,s
	plx
	sta [Self],y
	!POST LZ
	rtl

	.)
			
&_JWSetBack .(

	.abs 1
LZ	= *-1
	.dsb 5

Self	.long 4
BackCol	.word 2
	.text

	!PRO LZ
	lda BackCol
	and #$0f
	pha
	ldy #JW_Colours
	lda [Self],y
	and #$f0
	ora 1,s
	plx
	sta [Self],y
	!POST LZ
	rtl

	.)
	
&_JWSetPref .(

	.abs 1
LZ	= *-1
	.dsb 5

Self	.long 4
PrefX	.word 2
PrefY	.word 2
	.text

	!PRO LZ
	lda PrefX
	ldy #JW_PrefXS
	sta [Self],y
	lda PrefY
	ldy #JW_PrefYS
	sta [Self],y
	!POST LZ
	rtl

	.)
	
&_JWSetMin .(

	.abs 1
LZ	= *-1
	.dsb 5

Self	.long 4
PrefX	.word 2
PrefY	.word 2
	.text

	!PRO LZ
	lda PrefX
	ldy #JW_MinXS
	sta [Self],y
	lda PrefY
	ldy #JW_MinYS
	sta [Self],y
	!POST LZ
	rtl

	.)
	
&_JWSetAll .(

	.abs 1
LZ	= *-1
	.dsb 5

Self	.long 4
PrefX	.word 2
PrefY	.word 2
	.text

	!PRO LZ
	pei (PrefY)
	pei (PrefX)
	pei (Self+2)
	pei (Self)
	jsr @_JWSetMin
	jsr @_JWSetPref
	jsr @_JWSetMax
	!POP 8
	!POST LZ
	rtl

	.)
	
&_JWSetMax .(

	.abs 1
LZ	= *-1
	.dsb 5

Self	.long 4
MaxX	.word 2
MaxY	.word 2
	.text

	!PRO LZ
	lda MaxX
	bpl ispl
	lda #32767
ispl	ldy #JW_MaxXS
	sta [Self],y
	lda MaxY
	bpl ispl2
	lda #32767
ispl2	ldy #JW_MaxYS
	sta [Self],y
	!POST LZ
	rtl

	.)
	
&_JWGetHints 
	.(

	.abs 1
LZ	= *-1
	.dsb 5

Self	.long 4
Hints	.long 4
	.text

	!PRO LZ
	ldy #JW_MinXS
	lda [Self],y
	ldy #0
	sta [Hints],y
	ldy #JW_MinYS
	lda [Self],y
	ldy #2
	sta [Hints],y
	ldy #JW_PrefXS
	lda [Self],y
	ldy #4
	sta [Hints],y
	ldy #JW_PrefYS
	lda [Self],y
	ldy #6
	sta [Hints],y
	ldy #JW_MaxXS
	lda [Self],y
	ldy #8
	sta [Hints],y
	ldy #JW_MaxYS
	lda [Self],y
	ldy #10
	sta [Hints],y
	!POST LZ
	rtl

	.)
	
&_JWHandle .(

	.abs 1	
RectP	.long 4
TopP	.long 4
DataP	.long 4
WinP	.long 4
Temp	.word 2
TX	.word 2
TY	.word 2
LZ	= *-1
	.dsb 5
Self	.long 4
EveP	.long 4

	.text
	!PRO LZ
	lda EveP
	clc
	adc #EV_SIZE
	sta DataP
	lda EveP+2
	adc #0
	sta DataP+2
	ldy #EV_DataSz
	lda [EveP],y
	clc
	adc DataP
	sta RectP
	lda DataP+2
	adc #0
	sta RectP+2
	ldy #EV_Type
	lda [EveP],y
;	pha
;	!POUT "Event %d\n"
;	pla
	cmp #WEV_Focus
	bne nofoc
	
	ldy #EV_SubType
	lda [EveP],y
	ldy #JW_Flags
	cmp #EVS_Lost
	bne gained
	lda [Self],y
	and #$ffff-JF_Focused
	bra gotfc
gained	lda [Self],y
	ora #JF_Focused
gotfc	sta [Self],y
	pea JNF_Focus
	pei (Self+2)
	pei (Self)
	ldx #MJW_Notify		; Focus Changed
	jsr @VMC
	!POP 6
	!jra exeet
	
nofoc	cmp #WEV_Button
	bne nobut
	ldy #EV_SubType
	lda [EveP],y
	pha
	and #EVS_ButsDown
	beq nobd
	ldy #JW_Flags
	lda [Self],y
	and #JF_Selectable|JF_Focused
	cmp #JF_Selectable
	bne nahsel
	pei (Self+2)
	pei (Self)
	jsr @_JWReqFocus
	!POP 4
nahsel	
nobd	ldx #MJW_Button
	pla
	and #EVS_But2Mask
	beq b2mask
	ldx #MJW_RButton
b2mask	ldy #EV_SubType
	bra mouseev

nobut	cmp #WEV_Keyboard
	bne nokey
	ldy #EV_SIZE		; No rects...
	lda [EveP],y
	pha
	pei (Self+2)
	pei (Self)
	ldx #MJW_KeyDown
	jsr @VMC
	pla
	pla
	pla
	brl exeet

nokey	cmp #WEV_Motion
	beq ismot
	cmp #WEV_MotionBut
	beq ismot
	brl nomot
	
ismot	ldx #MJW_Motion
	ldy #EV_Type
	
mouseev	sty Temp
	ldy #EV_SIZE+2
	lda [EveP],y
	sec
	ldy #EV_TransY
	sbc [EveP],y
	pha
	
	ldy #EV_SIZE
	lda [EveP],y
	sec
	ldy #EV_TransX
	sbc [EveP],y	
	pha
	
	ldy #EV_SIZE+2
	lda [EveP],y
	pha
	ldy #EV_SIZE
	lda [EveP],y
	pha
	ldy Temp
	lda [EveP],y
	pha
	pei (Self+2)
	pei (Self)
	jsr @VMC
	!POP 14
	bra exeet

nomot	cmp #WEV_Boundary
	bne nobou
	ldy #EV_SubType
	lda [EveP],y
	pha
	pei (Self+2)
	pei (Self)
	ldx #MJW_Bound
	jsr @VMC
	pla
	pla
	pla
	bra exeet
	
nobou	cmp #WEV_Notice
	bne nonot
	pei (DataP+2)
	pei (DataP)
	ldy #EV_Sender
	lda [EveP],y
	pha
	ldy #EV_SubType
	lda [EveP],y
	pha
	pei (Self+2)
	pei (Self)
	ldx #MJW_Notice
	jsr @VMC
	!POP 12
	bra exeet
	
nonot	cmp #WEV_Expose
	beq doexp
exeet	!POST LZ
	rtl

doexp	ldy #JW_HideCnt
	lda [Self],y
	bne exeet	
	ldx #{P_XOffs
	jsr @S_segoff
	tax
	stz P_XOffs,x
	stz P_YOffs,x
	stz P_HasClear,x
	stz P_PenX,x
	stz P_PenY,x
	lda #PNT_BUFSIZE
	sta P_BufLeft,x
	txa
	sta P_BufIn,x
	stz P_BufDone,x

	ldy #JW_RegID
	lda [Self],y
	sta P_Ev+EV_Sender,x
	
	lda RectP
	sta P_Rects,x 
	lda RectP+2
	sta P_Rects+2,x 
	ldy #EV_NumRects
	lda [EveP],y
	sta P_Ev+EV_NumRects,x
	cmp #20
	bcc less40
	lda #1
	sta P_Ev+EV_NumRects,x
	lda #0
	sta [RectP]
	ldy #2
	sta [RectP],y
	sta _ClipRect,x
	sta _ClipRect+2,x
	ldy #JW_XSize
	lda [Self],y
	ldy #4
	sta [RectP],y
	sta _ClipRect+4,x
	ldy #JW_YSize
	lda [Self],y
	ldy #6
	sta [RectP],y
	sta _ClipRect+6,x
	brl dopaint
less40	sta Temp
	lda #-1
	sta _ClipRect,x
	sta _ClipRect+2,x
	stz _ClipRect+4,x
	stz _ClipRect+6,x
	stz TX
	stz TY
/*	ldy #JW_Flags
	lda [Self],y
	and #JF_Fixed
	bne isfx */
	ldy #JW_Parent
	lda [Self],y
	sta WinP
	iny
	iny
	lda [Self],y
	sta WinP+2
	ora WinP
	beq isfx
/*	ldy #JCnt_XScrld
	lda [WinP],y
	sta TX
	ldy #JCnt_YScrld
	lda [WinP],y
	sta TY */
	stz TX
	stz TY
isfx	ldy #EV_TransX
	lda [EveP],y
	sec
	ldy #JW_X
	sbc [Self],y
	clc
	adc TX
	sta TX
	ldy #EV_TransY
	lda [EveP],y
	sec
	ldy #JW_Y
	sbc [Self],y
	clc
	adc TY
	sta TY
	
tranrect	lda TX
	clc
	adc [RectP]
	sta [RectP]
	cmp _ClipRect,x
	bcs ishi1
	sta _ClipRect,x
ishi1	ldy #4
	clc
	adc [RectP],y
	cmp _ClipRect+4,x
	bcc islw1
	sta _ClipRect+4,x
islw1	lda TY
	ldy #2
	clc
	adc [RectP],y
	sta [RectP],y
	cmp _ClipRect+2,x
	bcs ishi2
	sta _ClipRect+2,x
ishi2	ldy #6
	clc
	adc [RectP],y
	cmp _ClipRect+6,x
	bcc islw2
	sta _ClipRect+6,x
islw2	lda RectP
	clc
	adc #RECT_SIZE
	sta RectP
	bcc noinc
	inc RectP+2
noinc	dec Temp
	bne tranrect
dopaint	
	ldx #{P_Font
	jsr @S_segoff
	tax
	ldy #JW_Font
	lda [Self],y
	sta P_Font,x
	ldy #JW_Colours
	lda [Self],y
	sta P_Col,x
	stz P_Mode,x
	ldy #JW_FStyle
	lda [Self],y
	sta P_Style,x
	jsr @GfxPrep
	
	pei (Self+2)
	pei (Self)
	ldy #JW_Flags
	lda [Self],y
	and #$ffff-JF_Repainted
	sta [Self],y
	ldx #MJW_Draw
	jsr @VMC
	!POP 4
	jsr @_GfxFlush
	brl exeet
	.)
		
&_JWSetData .(

	.abs 1
LZ	= *-1
	.dsb 5

Self	.long 4
Data	.long 4
	.text

	!PRO LZ
	lda Data
	ldy #JW_Data
	sta [Self],y
	lda Data+2
	ldy #JW_Data+2
	sta [Self],y
	!POST LZ
	rtl
	
	.)
	
&_JWGetData .(

	.abs 1
LZ	= *-1
	.dsb 5

Self	.long 4

	.text
	!PRO LZ
	ldy #JW_Data
	lda [Self],y
	tax
	iny
	iny
	lda [Self],y
	tay
	!POST LZ
	rtl
	
	.)
	
&_JWSetBounds
	.( 
	.abs 1
Same	.word 2
LZ	= *-1
	.dsb 5 
Self	.long 4
X	.word 2
Y	.word 2
XSize	.word 2
YSize	.word 2
	.text

	!PRO LZ
	stz Same
	ldx #0
	jsr round
	ldx #2
	jsr round
	lda XSize
	ldy #JW_XSize
	cmp [Self],y
	bne nsamesz
	lda YSize
	ldy #JW_YSize
	cmp [Self],y
	bne nsamesz
	inc Same
	lda X
	ldy #JW_X
	cmp [Self],y
	bne nsamesz
	lda Y
	ldy #JW_Y
	cmp [Self],y
	!jeq fine
nsamesz	ldy #JW_Flags
	lda [Self],y
	and #JF_Added
	beq noadded
	pei (YSize)
	pei (XSize)
	pei (Y)
	pei (X)
	pea EREG_SizePos
	ldy #JW_RegID
	lda [Self],y
	pha
;	!POUT "Bounds %d.%d %d,%d,%d,%d\n"
	pea WIN_EditRegion
	ldy #JW_Con
	lda [Self],y
	pha
	jsr @_sendCon
	!POP 16
	txa
	beq exeet
	bra nowch
	
noadded	pei (Self+2)
	pei (Self)
	jsr @_JWReDraw
	pla
	pla
	
nowch	lda X
	ldy #JW_X
	sta [Self],y
	lda Y
	ldy #JW_Y
	sta [Self],y
	
	lda XSize
	ldy #JW_XSize
	sta [Self],y
	lda YSize
	ldy #JW_YSize
	sta [Self],y
	
	lda Same
	bne noemit
	pea JNF_Resized
	pei (Self+2)
	pei (Self)
;	!POUT "Resized %lx\n"
	ldx #MJW_Notify
	jsr @VMC
	!POP 6
	
noemit	ldy #JW_Flags
	lda [Self],y
	and #JF_Added
	bne fine
	pei (Self+2)
	pei (Self)
	jsr @_JWReDraw
	pla
	pla
fine	ldx #1
exeet	!POST LZ
	rtl

round	.(
	lda X,x
	and #7
	cmp #4
	bcs rup
	adc XSize,x
	sta XSize,x
	lda X,x
	and #$ffff-7
	sta X,x
	bra donex
rup	eor #7
	inc
	pha
	clc
	adc X,x
	sta X,x
	lda XSize,x
	sec
	sbc 1,s
	sta XSize,x
	pla
donex	lda XSize,x
	and #7
	cmp #4
	bcc rdown
	eor #7
	inc
	clc
	adc XSize,x
	sta XSize,x
	bra gotrow
rdown	lda XSize,x
	and #$ffff-7
	sta XSize,x
gotrow	rts
	.)

	.)
&_JCntHandle .(

	.abs 1	
RectP	.long 4
TopP	.long 4
DataP	.long 4
WinP	.long 4
Temp	.word 2
TX	.word 2
TY	.word 2
LZ	= *-1
	.dsb 5
Self	.long 4
EveP	.long 4

	.text
	!PRO LZ
	lda EveP
	clc
	adc #EV_SIZE
	sta DataP
	lda EveP+2
	adc #0
	sta DataP+2
	ldy #EV_DataSz
	lda [EveP],y
	clc
	adc DataP
	sta RectP
	lda DataP+2
	adc #0
	sta RectP+2
	ldy #EV_Type
	lda [EveP],y
;	pha
;	!POUT "Type %d\n"
;	pla
	cmp #WEV_Focus
	bne nofoc
	
	ldy #EV_SubType
	lda [EveP],y
	ldy #JW_Flags
	cmp #EVS_Lost
	bne gained
	lda [Self],y
	and #$ffff-JF_Focused
	bra gotfc
gained	lda [Self],y
	ora #JF_Focused
gotfc	sta [Self],y
	pea JNF_Focus
	pei (Self+2)
	pei (Self)
	ldx #MJW_Notify		; Focus Changed
	jsr @VMC
	!POP 6
	!jra exeet
	
nofoc	cmp #WEV_Button
	bne nobut
	ldy #EV_SubType
	lda [EveP],y
	pha
	and #EVS_ButsDown
	beq nobd
	ldy #JW_Flags
	lda [Self],y
	and #JF_Selectable|JF_Focused
	cmp #JF_Selectable
	bne nahsel
	pei (Self+2)
	pei (Self)
	jsr @_JWReqFocus
	!POP 4
nahsel	
nobd	ldx #MJW_Button
	pla
	and #EVS_But2Mask
	beq b2mask
	ldx #MJW_RButton
b2mask	ldy #EV_SubType
	bra mouseev

nobut	cmp #WEV_Keyboard
	bne nokey
	ldy #EV_SIZE		; No rects...
	lda [EveP],y
	pha
	pei (Self+2)
	pei (Self)
	ldx #MJW_KeyDown
	jsr @VMC
	pla
	pla
	pla
	brl exeet

nokey	cmp #WEV_Motion
	beq ismot
	cmp #WEV_MotionBut
	beq ismot
	brl nomot
	
ismot	ldx #MJW_Motion
	ldy #EV_Type
	
mouseev	sty Temp
	ldy #EV_SIZE+2
	lda [EveP],y
	sec
	ldy #EV_TransY
	sbc [EveP],y
	pha
	
	ldy #EV_SIZE
	lda [EveP],y
	sec
	ldy #EV_TransX
	sbc [EveP],y	
	pha
	
	ldy #EV_SIZE+2
	lda [EveP],y
	pha
	ldy #EV_SIZE
	lda [EveP],y
	pha
	ldy Temp
	lda [EveP],y
	pha
	phx
tryag	ldy #JCnt_HasCh
	lda [Self],y
	!jeq nochi
	ldy #JCnt_FrontCh
	lda [Self],y
	sta WinP
	iny
	iny
	lda [Self],y
	sta WinP+2
nxchild	lda WinP
	ora WinP+2
	beq nochi
	ldy #JW_Flags
	lda [WinP],y
	and #JF_Added
	bne nope
	ldy #JW_X
	lda [WinP],y
	cmp 5,s
	beq ok1
	bpl nope
ok1	ldy #JW_XSize
	clc
	adc [WinP],y
	cmp 5,s
	beq nope
	bmi nope
	ldy #JW_Y
	lda [WinP],y
	cmp 7,s
	beq ok2
	bpl nope
ok2	ldy #JW_YSize
	clc
	adc [WinP],y
	cmp 7,s
	beq nope
	bmi nope
	ldy #JW_X
	lda 5,s
	sec
	sbc [WinP],y
	sta 5,s
	ldy #JW_Y
	lda 7,s
	sec
	sbc [WinP],y
	sta 7,s
	lda WinP
	sta Self
	lda WinP+2
	sta Self+2
	brl tryag
nope	ldy #JW_Prev
	lda [WinP],y
	tax
	iny
	iny
	lda [WinP],y
	sta WinP+2
	stx WinP
	bra nxchild
nochi	plx
	pei (Self+2)
	pei (Self)
	jsr @VMC
	!POP 14
	bra exeet

nomot	cmp #WEV_Boundary
	bne nobou
	ldy #EV_SubType
	lda [EveP],y
	pha
	pei (Self+2)
	pei (Self)
	ldx #MJW_Bound
	jsr @VMC
	pla
	pla
	pla
	bra exeet
nobou	cmp #WEV_Notice
	bne nonot
	pei (DataP+2)
	pei (DataP)
	ldy #EV_Sender
	lda [EveP],y
	pha
	ldy #EV_SubType
	lda [EveP],y
	pha
	pei (Self+2)
	pei (Self)
	ldx #MJW_Notice
	jsr @VMC
	!POP 12
	bra exeet
nonot	cmp #WEV_Expose
	beq doexp
exeet	!POST LZ
	rtl

doexp	ldy #JW_HideCnt
	lda [Self],y
	bne exeet
	
	
	ldx #{P_XOffs
	jsr @S_segoff
	tax
	stz P_XOffs,x
	stz P_YOffs,x
	stz P_HasClear,x
	stz P_PenX,x
	stz P_PenY,x
	lda #PNT_BUFSIZE
	sta P_BufLeft,x
	txa
	sta P_BufIn,x
	stz P_BufDone,x

	ldy #JW_RegID
	lda [Self],y
	sta P_Ev+EV_Sender,x
	
	lda RectP
	sta P_Rects,x 
	lda RectP+2
	sta P_Rects+2,x 
	ldy #EV_NumRects
	lda [EveP],y
	sta P_Ev+EV_NumRects,x
	cmp #20
	bcc less40
	lda #1
	sta P_Ev+EV_NumRects,x
	lda #0
	sta [RectP]
	ldy #2
	sta [RectP],y
	sta _ClipRect,x
	sta _ClipRect+2,x
	ldy #JW_XSize
	lda [Self],y
	ldy #4
	sta [RectP],y
	sta _ClipRect+4,x
	ldy #JW_YSize
	lda [Self],y
	ldy #6
	sta [RectP],y
	sta _ClipRect+6,x
	brl dopaint
less40	sta Temp
	lda #-1
	sta _ClipRect,x
	sta _ClipRect+2,x
	stz _ClipRect+4,x
	stz _ClipRect+6,x
	stz TX
	stz TY
/*	ldy #JW_Flags
	lda [Self],y
	and #JF_Fixed
	bne isfx */
	ldy #JW_Parent
	lda [Self],y
	sta WinP
	iny
	iny
	lda [Self],y
	sta WinP+2
	ora WinP
	beq isfx
/*	ldy #JCnt_XScrld
	lda [WinP],y
	sta TX
	ldy #JCnt_YScrld
	lda [WinP],y
	sta TY */
	stz TX
	stz TY
isfx	ldy #EV_TransX
	lda [EveP],y
	sec
	ldy #JW_X
	sbc [Self],y
	clc
	adc TX
	sta TX
	ldy #EV_TransY
	lda [EveP],y
	sec
	ldy #JW_Y
	sbc [Self],y
	clc
	adc TY
	sta TY
	
tranrect	lda TX
	clc
	adc [RectP]
	sta [RectP]
	cmp _ClipRect,x
	bcs ishi1
	sta _ClipRect,x
ishi1	ldy #4
	clc
	adc [RectP],y
	cmp _ClipRect+4,x
	bcc islw1
	sta _ClipRect+4,x
islw1	lda TY
	ldy #2
	clc
	adc [RectP],y
	sta [RectP],y
	cmp _ClipRect+2,x
	bcs ishi2
	sta _ClipRect+2,x
ishi2	ldy #6
	clc
	adc [RectP],y
	cmp _ClipRect+6,x
	bcc islw2
	sta _ClipRect+6,x
islw2	lda RectP
	clc
	adc #RECT_SIZE
	sta RectP
	bcc noinc
	inc RectP+2
noinc	dec Temp
	bne tranrect
dopaint	pei (Self+2)
	pei (Self)
	jsr drawAll
	!POP 4
	jsr @_GfxFlush
	brl exeet
	.)
	
drawAll	.(
	.abs 1
WinP	.long 4
Rect2	.word 2
LZ	= *-1
	.dsb 4

Self	.long 4
	.text

	!PRO LZ
	ldx #{P_Font
	jsr @S_segoff
	tax
	ldy #JW_Font
	lda [Self],y
	sta P_Font,x
	ldy #JW_Colours
	lda [Self],y
	sta P_Col,x
	stz P_Mode,x
	ldy #JW_FStyle
	lda [Self],y
	sta P_Style,x
	jsr @GfxPrep
	ldy #JW_Flags
	lda [Self],y
	and #$ffff-JF_Repainted
	sta [Self],y
	pei (Self+2)
	pei (Self)
	ldx #MJW_Draw
	jsr @VMC
	pla
	pla
	
	ldy #JCnt_HasCh
	lda [Self],y
	beq nmore2
	ldy #JCnt_BackCh
	lda [Self],y
	sta WinP
	iny
	iny
	lda [Self],y
	sta WinP+2
	
gochild	lda WinP
	ora WinP+2
	bne hasmore
nmore2	brl nomore
hasmore	ldy #JW_RegID
	lda [Self],y
	cmp [WinP],y
	bne nothis
	ldx #{P_YOffs
	jsr @S_segoff
	tax
	lda P_YOffs,x
	pha
	ldy #JW_Y
	clc
	adc [WinP],y
	sta P_YOffs,x
	sta P_PenY,x
	ldy #JW_YSize
	clc
	adc [WinP],y
	sta Rect2
	lda P_XOffs,x
	pha
	ldy #JW_X
	clc
	adc [WinP],y
	sta P_XOffs,x
	sta P_PenX,x
	ldy #JW_XSize
	clc
	adc [WinP],y
	cmp _ClipRect,x
	bmi isclipped
	lda _ClipRect+2,x
	cmp Rect2
	bpl isclipped
	lda _ClipRect+4,x
	cmp P_XOffs,x
	bmi isclipped
	lda _ClipRect+6,x
	cmp P_YOffs,x
	bmi isclipped
	ldy #JW_Flags
	lda [WinP],y
	and #$ffff-JF_Repainted
	sta [WinP],y
	pei (WinP+2)
	pei (WinP)
	ldx #MJW_Draw
	jsr @VMC
	pla
	pla
isclipped	
	ldx #{P_XOffs
	jsr @S_segoff
	tax
	pla
	sta P_XOffs,x
	pla
	sta P_YOffs,x
nothis	ldy #JW_Next
	lda [WinP],y
	tax
	iny
	iny
	lda [WinP],y
	sta WinP+2
	stx WinP
	brl gochild	
nomore	!POST LZ
	rts
	
	.)
		
/* ----------------------------------------

          Redrawing and invalidating

	JWinReDraw
	JWinInvalid

------------------------------------------*/

&_JWNotify
&_JWReDraw .(

	.abs 1
LZ	= *-1
	.dsb 5

Self	.long 4

	.text
	!PRO LZ
	ldy #JW_Flags
	lda [Self],y
	and #JF_Repainted
	bne nodraw
	lda [Self],y
	ora #JF_Repainted
	sta [Self],y
	ldy #JW_HideCnt
	lda [Self],y
	bne nodraw
	ldy #JW_YSize
	lda [Self],y
	pha
	ldy #JW_XSize
	lda [Self],y
	pha
	pea 0
	pea 0
	pei (Self+2)
	pei (Self)
	jsr @_JWInvalid
	!POP 12
nodraw	!POST LZ
	rtl
	
	.)
	
&_JWInvalid .(

	.abs 1
event	.dsb EV_SIZE
LZ	= *-1
	.dsb 5
Self	.long 4
rect	.long 8

	.text
	!PRO LZ
tryag	ldy #JW_Flags
	lda [Self],y
	and #JF_Added
	bne isadded
	ldy #JW_X
	lda [Self],y
	clc
	adc rect
	sta rect
	ldy #JW_Y
	lda [Self],y
	clc
	adc rect+2
	sta rect+2
	ldy #JW_Parent
	lda [Self],y
	tax
	iny
	iny
	lda [Self],y
	sta Self+2
	stx Self
	bra tryag
isadded	lda #WEV_Expose
	sta event+EV_Type
	ldy #JW_RegID
	lda [Self],y
	sta event+EV_Sender
	stz event+EV_DataSz
	lda #1
	sta event+EV_NumRects
	stz event+EV_SubType
	
	pea EVF_Self
	pea 0	; buf
	pea 0
	pea 0
	tdc
	clc
	adc #rect
	pha
	pea 0
	tdc
	clc
	adc #event
	pha
	pea WIN_SendEvent
	ldy #JW_Con
	lda [Self],y
	pha
	jsr @_sendCon
	!POST LZ+18
	rtl
	
	.)

&_JWDraw	
	.(
	rtl
	.)
	
&_JWNotice .(

	.abs 1
LZ	= *-1
	.dsb 5
Self	.long 4
SubType	.word 2
From	.word 2
DataP	.long 4
	.text
	
	!PRO LZ
	lda SubType
	cmp #EVS_Changed
	bne nochan
	lda [DataP]
	ldy #JW_X
	sta [Self],y
	ldy #2
	lda [DataP],y
	ldy #JW_Y
	sta [Self],y
	ldy #4
	lda [DataP],y
	ldy #JW_XSize
	sta [Self],y
	ldy #6
	lda [DataP],y
	ldy #JW_YSize
	sta [Self],y
	pea JNF_Resized
	pei (Self+2)
	pei (Self)
;	!POUT "Notice about change for %lx\n"
	ldx #MJW_Notify
	jsr @VMC
	!POP 6
	bra exeet
nochan	cmp #EVS_Shown
	bne exeet
	lda #0
	ldy #JW_HideCnt
	sta [Self],y
	ldy #JW_RegFlags
	lda [Self],y
	ora #REGF_Visible
	sta [Self],y
exeet	!POST LZ
	rtl

	.)
	
&_JWRButton .(
	.abs 1
PareP	.long 4
LZ	= *-1
	.dsb 5

Self	.long 4
Subtype	.word 2
X	.word 2
Y	.word 2
XAbs	.word 2
YAbs	.word 2
	
	.text	
	!PRO LZ
	ldy #JW_Parent
	lda [Self],y
	sta PareP
	iny
	iny
	lda [Self],y
	sta PareP+2
	ora PareP
	beq nohigh
	pei (YAbs)
	pei (XAbs)
	pei (Y)
	pei (X)
	pei (Subtype)
	pei (PareP+2)
	pei (PareP)
	ldx #MJW_RButton
	jsr @VMC
	!POP 14
nohigh	!POST LZ
	rtl

	.)
	

&_JWBound	
&_JWKeyD
&_JWMotion
&_JWButton rtl

	!PRPCLASS JW

JWMethods	.(
	jmp (Methods,x)
Methods	.long _JWInit	; Init
	.long _JWKill	; Destory
	.long _JWDraw	; Draw
	.long _JWShow	; Show
	.long _JWHide	; Hide
	.long _JWHandle	; Handle
	.long _JWNotify	; Notify
	.long _JWGetHints ; Notify

	.long _JWKeyD	; A key down
	.long _JWButton	; Button 
	.long _JWRButton ; Right button (menu)
	.long _JWMotion	; Motion
	.long _JWBound	; Boundary
	.long _JWNotice	; Notice
	.)

winname	.asc "/sys/win",0
nowin	.asc "No window engine!",10,0
		
&Chars	.dsb 8
	.byte $ff,$80,$80,$80,$80,$80,$80,$80
	.byte $ff,0,0,0,0,0,0,0
	.byte $ff,1,1,1,1,1,1,1
	.byte $80,$80,$80,$80,$80,$80,$80,$80
	.byte 1,1,1,1,1,1,1,1
	.byte $80,$80,$80,$80,$80,$80,$80,$ff
	.byte 0,0,0,0,0,0,0,$ff
	.byte 1,1,1,1,1,1,1,$ff
	.byte 1,1,$21,$15,$0d,$1d,1,$fe
	
&DflPen	.word $00
&DflBack .word $0f

	.include "Graphics.a65"

	.data
&JRootObj
	.dsb JW_SIZE

	
	.bss

	/* Drawing globals */

&_ClipRect	.dsb 8
&MainWin	.word 0,0
P_BufIn	.word 0
P_BufLeft	.word 0
P_Rects	.word 0,0
P_Buf	.dsb PNT_BUFSIZE
P_PenX	.word 0
P_PenY	.word 0
P_Font	.word 0
P_Mode	.word 0
P_Style	.word 0
P_Col	.word 0
P_XOffs	.word 0
P_YOffs	.word 0
P_HasClear	.word 0

P_Ev	.dsb EV_SIZE
P_BufDone	= P_Ev+EV_DataSz

WCon	.word 0
AnEvent	.dsb 2048
	
	.)
