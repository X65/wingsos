	.(

	.al
	.xl
	.pic
	
	.include	<kern.i65>
	.include	<win.i65>	
	.include	<stdio.i65>
	.include	<widget.i65>
	.include	<dirent.i65>
	.include	<65816.i65>
	.include	<lcc.i65>

/*-----------------------------------------------
     List Widget - (well table widget actually)
------------------------------------------------*/

&_JListInit	.(

	.abs 1
LZ	= *-1
	.dsb 5
Self	.long 4
Model 	.long 4

	.text
	!PRO LZ
	!PRPOBJ JList
	pea JF_Selectable
	pea WEV_Button
	pea 80
	pea 80
	pei (Self+2)
	pei (Self)
	jsr @_JWInit
	!POP 12	
	lda #32767
	ldy #JW_MaxXS
	sta [Self],y
	ldy #JW_MaxYS
	sta [Self],y

	pei (Model+2)
	pei (Model)
	pea 0
	pea 0
	pei (Self+2)
	pei (Self)
	jsr _JListAddView
	!POP 12
	stx Model
	sty Model+2
	
	lda Model
	ldy #JList_Model
	sta [Self],y
	iny
	iny
	lda Model+2
	sta [Self],y
		
	ldy #JListRowV_List
	lda Self
	sta [Model],y
	iny
	iny
	lda Self+2
	sta [Model],y
		
	ldy #JW_Colours
	lda [Self],y
	and #$f0
	ora #$01
	sta [Self],y
exeet	ldx Self
	ldy Self+2
	!POST LZ
	rtl
	.)

&_JListDraw	.(

	jmp @_GfxClear
	
	.)
		
&_JListItemClicked
	.(
	.abs 1
LZ	= *-1
	.dsb 5
Self	.long 4
ItemP	.long 4

	.text
	!PRO LZ
	ldy #JListRow_Flags
	lda [ItemP],y
	eor #JITEMF_Selected
	sta [ItemP],y
	
	ldy #JListRowV_Data+2
	lda [ItemP],y
	pha
	dey
	dey
	lda [ItemP],y
	pha
	ldy #JList_Clicked
	lda [Self],y
	tax
	iny
	iny
	lda [Self],y
	jsr @cb
	!POP 4
	
	pei (Self+2)
	pei (Self)
	jsr @_JListReDrawCols
	!POP 4
	!POST LZ
	rtl
		
	.)
	
&_JListReDrawCols
	.(
	.abs 1
WinP	.long 4
LZ	= *-1
	.dsb 5
Self	.long 4

	.text
	!PRO LZ
	ldy #JCnt_BackCh
	lda [Self],y
	sta WinP
	iny
	iny
	lda [Self],y
	sta WinP+2
gochild	lda WinP
	ora WinP+2
	beq nomore
	pei (WinP+2)
	pei (WinP)
	jsr @_JWReDraw
	pla
	pla
nometa	ldy #JW_Next
	lda [WinP],y
	tax
	iny
	iny
	lda [WinP],y
	sta WinP+2
	stx WinP
	bra gochild
nomore
	!POST LZ
	rtl
	.)
	
&_JListAddColumns
	.(
	.abs 1
Offs	.word 2
CurP	.long 4
LZ	= *-1
	.dsb 5
Self	.long 4
ColP	.long 4
Title	.long 4
Offset	.long 4
Width	.word 2
Type	.word 2

	.text
	!PRO LZ
	stz Offs
	
nxcol	ldx Offs
	lda Title,x
	ora Title+2,x
	!jeq exeet
	lda Type,x
	pha
	lda Offset+2,x
	pha
	lda Offset,x
	pha
	lda Width,x
	pha
	lda Title+2,x
	pha
	lda Title,x
	pha
	pei (Self+2)
	pei (Self)
	pea 0
	pea 0
	jsr @_JListColInit
	!POP 20
	stx CurP
	sty CurP+2
	
	ldy #JList_SortCol
	lda [Self],y
	iny
	iny
	ora [Self],y
	!jne alrs
	lda CurP
	ldy #JList_SortCol
	sta [Self],y
	iny
	iny
	lda CurP+2
	sta [Self],y
alrs	pei (CurP+2)
	pei (CurP)
	pei (Self+2)
	pei (Self)
	ldx #MJCnt_Add
	jsr @VMC
	!POP 8
	
	lda ColP
	ora ColP+2
	beq nocolp
	lda CurP
	sta [ColP]
	lda CurP+2
	ldy #2
	sta [ColP],y
	lda #4
	clc
	adc ColP
	sta ColP
	!ics ColP+2
nocolp	lda #12
	clc
	adc Offs
	sta Offs
	!jra nxcol
	
exeet	!POST LZ
	rtl
	.)

&_JListScrolled 
	.(

	.abs 1
LZ	= *-1
	.dsb 5
Self	.long 4
ScrX	.long 4
ScrY	.long 4

	.text
	
	!PRO LZ
	lda ScrY
	and #$ffff-7
	ldy #JList_YScroll
	cmp [Self],y
	!jeq exeet
	sta [Self],y
	pei (Self+2)
	pei (Self)
	jsr @_JListReDrawCols
	pla
	pla
exeet	!POST LZ
	rtl

	.)

/*
----------------------
  The List model code
  JListAppend
  JListRemove
----------------------
*/

&_JListAppend
	.(
	.abs 1
LZ	= *-1
	.dsb 5
Parent	.long 4
Cur	.long 4	
	.text
	!PRO LZ
	pei (Cur+2)
	pei (Cur)
	ldy #JTreeRow_Children+2
	lda [Parent],y
	tax
	pha
	dey
	dey
	lda [Parent],y
	pha
	phx
	pha
	jsr @_addQueueB
	!POP 12
	tya
	ldy #JTreeRow_Children+2
	sta [Parent],y
	dey
	dey
	txa
	sta [Parent],y
	
nxv	ldy #JListRow_NextView
	lda [Parent],y
	tax
	iny
	iny
	lda [Parent],y
	sta Parent+2
	stx Parent
	ora Parent
	!jeq exeet
	
	pei (Cur+2)
	pei (Cur)
	pei (Parent+2)
	pei (Parent)
	ldy #JListRowV_List+2
	lda [Parent],y
	pha
	dey
	dey
	lda [Parent],y
	pha
	jsr _JListAddView
	!POP 12
	!jra nxv
	
exeet	!POST LZ
	rtl
	.)
	
&_JListRemove
	.(
	.abs 1
Child	.long 4
LZ	= *-1
	.dsb 5
Parent	.long 4
Cur	.long 4	
	.text
	!PRO LZ
	
	pei (Cur+2)
	pei (Cur)
	ldy #JTreeRow_Children+2
	lda [Parent],y
	pha
	dey
	dey
	lda [Parent],y
	pha
	jsr @_remQueue
	!POP 8
	tya
	ldy #JTreeRow_Children+2
	sta [Parent],y
	dey
	dey
	txa
	sta [Parent],y
	
	
nxv	ldy #JListRow_NextView
	lda [Cur],y
	sta Child
	iny
	iny
	lda [Cur],y
	sta Child+2
	ora Child
	!jeq exeet
	
	pei (Cur+2)
	pei (Cur)
	pei (Child+2)
	pei (Child)
	ldy #JListRowV_List+2
	lda [Child],y
	pha
	dey
	dey
	lda [Child],y
	pha
	jsr _JListRemView
	!POP 12
	!jra nxv
	
exeet	!POST LZ
	rtl
	.)
	
_JListRemView
	.(
	.abs 1
Parent	.long 4
LZ	= *-1
	.dsb 4
List	.long 4
View	.long 4
Prev	.long 4

	.text
	!PRO LZ	
	; Parent is always the model
	ldy #JList_Model
	lda [List],y
	sta Parent
	iny
	iny
	lda [List],y
	sta Parent+2
		
	ldy #JView_MaxY
	lda [List],y
	sec
	ldy #JListRowV_Height
	sbc [View],y
	ldy #JView_MaxY
	sta [List],y
	iny
	iny
	lda [List],y
	sbc #0
	sta [List],y
	
notv	pei (View+2)
	pei (View)
	ldy #JTreeRowV_Children+2
	lda [Parent],y
	pha
	dey
	dey
	lda [Parent],y
	pha
	jsr @_remQueue
	!POP 8
	tya
	ldy #JTreeRowV_Children+2
	sta [Parent],y
	dey
	dey
	txa
	sta [Parent],y
	
	ldy #JListRow_NextView
	lda [View],y
	sta [Prev],y
	iny
	iny
	lda [View],y
	sta [Prev],y
	pei (View+2)
	pei (View)
	jsr @_free
	!POP 4
exeet	!POST LZ
	rts
	.)
	
_JListAddView
	.(
	.abs 1
View	.long 4
Child	.long 4
LZ	= *-1
	.dsb 4
List	.long 4
Parent	.long 4
Cur	.long 4	
	.text
	!PRO LZ
morevi	pea 0
	ldx #JListRowV_SIZE
	lda Parent
	ora Parent+2
	bne hasp
	ldx #JTreeRowV_SIZE
hasp	phx
	pea 0
	pea 1
	jsr @_calloc
	!POP 8
	stx View
	sty View+2
	ldy #JListRowV_Data
	lda Cur
	sta [View],y
	iny
	iny
	lda Cur+2
	sta [View],y
	lda #8
	ldy #JListRowV_Height
	sta [View],y
	ldy #JListRow_Flags
	lda [Cur],y
	sta [View],y
	
	ldy #JListRow_NextView
	lda [Cur],y
	sta [View],y
	lda View
	sta [Cur],y
	iny
	iny
	lda [Cur],y
	sta [View],y
	lda View+2
	sta [Cur],y
	
	ldy #JListRowV_List
	lda List
	sta [View],y
	iny
	iny
	lda List+2
	sta [View],y
	
	lda Parent
	ora Parent+2
	!jeq nopare

	; already have parent
	
	ldy #JListRowV_Height
	lda [View],y
	clc
	ldy #JView_MaxY
	adc [List],y
	sta [List],y
	iny
	iny
	lda [List],y
	adc #0
	sta [List],y
	
	pei (View+2)
	pei (View)
	ldy #JTreeRowV_Children+2
	lda [Parent],y
	tax
	pha
	dey
	dey
	lda [Parent],y
	pha
	phx
	pha
	jsr @_addQueueB
	!POP 12
	tya
	ldy #JTreeRowV_Children+2
	sta [Parent],y
	dey
	dey
	txa
	sta [Parent],y
	bra exeet
	
	; If model has no parent
	; we must be at the root
	; so lets add views for all children
	
nopare	ldy #JTreeRow_Children
	lda [Cur],y
	sta Child
	iny
	iny
	lda [Cur],y
	sta Child+2
	ora Child
	!jeq exeet
	
nxch	pei (Child+2)
	pei (Child)
	pei (View+2)
	pei (View)
	pei (List+2)
	pei (List)
	jsr _JListAddView
	!POP 12
	
	lda [Child]
	tax
	ldy #2
	lda [Child],y
	sta Child+2
	stx Child
	ldy #JTreeRow_Children
	lda [Cur],y
	cmp Child
	bne nxch
	iny
	iny
	lda [Cur],y
	cmp Child+2
	bne nxch
exeet	ldx View
	ldy View+2
	!POST LZ
	rts
	.)


&_JListGetIter
	.(
	.abs 1
Model	.long 4
LZ	= *-1
	.dsb 5
Self	.long 4
Iter	.long 4
	.text
	!PRO LZ
	ldy #JList_Model
	lda [Self],y
	sta Model
	iny
	iny
	lda [Self],y
	sta Model+2
	
	ldy #JTreeRowV_Children
	lda [Model],y
	tax
	iny
	iny
	lda [Model],y
	tay
	lda Iter
	tcd
	lda #0
	sta TreeIter_Indent
	stz TreeIter_ItemP
	stz TreeIter_ItemP+2
	stx TreeIter_PareP
	sty TreeIter_PareP+2
	!POST LZ
	rtl
	.)
	
&_JListNextItem
	.(
	.abs 0
ItemP	= TreeIter_ItemP
PareP	= TreeIter_PareP
IterStk	= 8
	.text
	
	phd
	lda 2+IterStk,s
	tcd
	lda ItemP
	ora ItemP+2
	bne gonext
	lda TreeIter_PareP
	sta TreeIter_ItemP
	lda TreeIter_PareP+2
	sta TreeIter_ItemP+2
	bra skipnx
gonext	lda [ItemP]
	tax
	ldy #2
	lda [ItemP],y
	sta ItemP+2
	stx ItemP
	cpx TreeIter_PareP
	bne skipnx
	ldx #1
	cmp TreeIter_PareP+2
	beq none
skipnx	ldy #JListRowV_Height
	lda [ItemP],y
	sta TreeIter_Height
	ldy #JListRow_Flags
	lda [ItemP],y
	sta TreeIter_Flags
	ldy #JListRowV_Data
	lda [ItemP],y
	sta TreeIter_DataP
	iny
	iny
	lda [ItemP],y
	sta TreeIter_DataP+2
dif	ldx #0
none	pld
	rtl
		
	
	.)
		
	!PRPCLASS JList
		
JListMethods	.(
	jmp (Methods,x)
Methods	.long _JCntInit	; Init
	.long _JCntKill	; Destory
	.long _JListDraw	; Draw
	.long _JCntShow	; Show
	.long _JCntHide	; Hide
	.long _JCntHandle	; Handle
	.long _JViewNotify	; Notify
	.long _JCntGetHints ; Notify

	.long _JWKeyD	; A key down
	.long _JWButton	; Button 
	.long _JWRButton ; Right button (menu)
	.long _JWMotion	; Motion
	.long _JWBound	; Boundary
	.long _JWNotice	; Notice

	.long _JCntAdd	; Add
	.long _JCntRemove ; Remove
	.long _JCntLayout
	
	.long _JListScrolled ; scrolled

	
	.)

	.)
	
