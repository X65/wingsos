	.(

	.al
	.xl
	.pic
	
	.include	<kern.i65>
	.include	<win.i65>	
	.include	<stdio.i65>
	.include	<widget.i65>
	.include	<font.i65>
	.include	<lcc.i65>

/* Line_SIZE 12 */

	.mac CALC_LINE
	asl:asl:pha:asl:adc 1,s:ply
	.mend

/*-----------------------------------------------
           Text Widget - Jwin
------------------------------------------------*/

&_JTxtInit	.(
	.abs 1
LZ	= *-1
	.dsb 5

Self	.long 4

	.text
	!PRO LZ
	!PRPOBJ JTxt
	pea 0
	pea WEV_Button+WEV_Boundary
	pea 48	; YSize
	pea 48	; XSize
	pei (Self+2)
	pei (Self)
	jsr @_JWInit
	!POP 12
	
	lda #1
	ldy #JW_Font
	sta [Self],y
	lda #0
	ldy #JW_FStyle
	sta [Self],y
	
	pea 0
	pea Line_SIZE*128
	jsr @_malloc
	pla
	pla
	tya
	ldy #JTxt_LineTab+2
	sta [Self],y
	txa
	dey
	dey
	sta [Self],y
	lda #128
	ldy #JTxt_AcLines
	sta [Self],y
	lda #0
	ldy #JTxt_Lines
	sta [Self],y
	lda #48
	ldy #JTxt_XWidth
	sta [Self],y
		
exeet	ldx Self
	ldy Self+2
	!POST LZ
	rtl

	.)

&_JTxtClear
	.(
	.abs 1
LZ	= *-1
	.dsb 5
Self	.long 4
	.text

	!PRO LZ
	lda #0
	ldy #JTxt_Lines
	sta [Self],y
	ldy #JTxt_LineTop
	sta [Self],y
	ldy #JTxt_YTop
	sta [Self],y
	ldy #JView_MaxY
	sta [Self],y
	iny
	iny
	sta [Self],y
	pei (Self+2)
	pei (Self)
	ldy #JView_Scroller+2
	lda [Self],y
	pha
	dey
	dey
	lda [Self],y
	pha
	ldx #MJScr_Sync
	jsr @VMCheck
	!POP 8
	!POST LZ
	rtl
	
	.)

&_JTxtNotify .(
	.abs 1
LZ	= *-1
	.dsb 5
Self	.long 4
Type	.word 2
	.text

	!PRO LZ
	lda Type
	cmp #JNF_Resized
	bne notrz
	ldy #JW_XSize
	lda [Self],y
	cmp #24
	bcs itsok
	lda #24
itsok	ldy #JTxt_XWidth
	sta [Self],y
notrz	pei (Type)
	pei (Self+2)
	pei (Self)
	jsr @_JViewNotify
	!POST LZ+6
	rtl

	.)


/*
&_JTxtScrolled .(

	.abs 1
WinP	.long 4
LZ	= *-1
	.dsb 5

Self	.long 4
Val	.long 4

	.text
	!PRO LZ
	pei (Self+2)
	pei (Self)
	jsr @_JWinGetData
	pla
	pla
	stx WinP
	sty WinP+2
	lda Val
	clc
	ldy #JW_YSize
	adc [WinP],y
	ldy #JTxt_CurBottom
	sta [WinP],y
	lda Val+2
	adc #0
	ldy #JTxt_CurBottom+2
	sta [WinP],y
	pei (WinP+2)
	pei (WinP)
	jsr prepBarTop
	jsr @_JWinReDraw
	pla
	pla
	!POST LZ
	rtl

	.)*/
	
&_JTxtDraw	.(

	.abs 1
YUp	.word 2
Upto	.long 4
CharLeft = *
Temp	.word 2
BufP	.long 4
PieP	.long 4
LineUp	.word 2
InPiece	.word 2
StrP	.long 4
LZ	= *-1
	.dsb 5
Self	.long 4

	.text

	!PRO LZ
	ldy #JW_Colours
	lda [Self],y
	pha
	jsr @_GfxSetCol
	pla
	
	ldy #JW_FStyle
	lda [Self],y
	pha
	jsr @_GfxStyle
	pla
	
	ldy #JW_Font
	lda [Self],y
	pha
	jsr @_GfxSetFont
	pla
	
	ldy #JTxt_YTop
	lda [Self],y
	sta YUp
	ldy #JTxt_LineTop
	lda [Self],y
	sta LineUp
	!CALC_LINE
	ldy #JTxt_LineTab
	adc [Self],y
	sta Upto
	iny
	iny
	lda [Self],y
	adc #0
	sta Upto+2
	
nextline ldy #JTxt_Lines
	lda LineUp
	cmp [Self],y
	bcc okline
	stz Temp
	brl noline
okline	ldy #Line_Piece
	lda [Upto],y
	sta PieP
	iny
	iny
	lda [Upto],y
	sta PieP+2
	ldy #Line_LineSz
	lda [Upto],y
	sta CharLeft
	
	ldy #Line_PieceIn
	lda [Upto],y
	sta InPiece
	clc
	adc #Piece_Buf
	adc PieP
	sta BufP
	lda PieP+2
	adc #0
	sta BufP+2
	
	lda YUp
	ldy #Line_BotLine
	clc
	adc [Upto],y
	pha
	pea 0	
	jsr @_GfxSetPen
	pla
	pla
	
	pea ^TxtStr2
	pea !TxtStr2
	jsr @_GfxString
	pla
	pla	
	jsr @_GfxGetPtr
	stx StrP
	sty StrP+2
	
repit	dec CharLeft
	bmi endline
	lda [BufP]
	!INP BufP
	and #$ff
	
	pha	
	jsr @_GfxChar
	pla 
	inc InPiece
	lda InPiece
	ldy #Piece_Used
	cmp [PieP],y
	bcc repit

	ldy #Piece_Next
	lda [PieP],y
	tax
	iny
	iny
	lda [PieP],y
	sta PieP+2
	stx PieP
	txa
	clc
	adc #Piece_Buf
	sta BufP
	lda PieP+2
	adc #0
	sta BufP+2
	stz InPiece
	bra repit

endline	jsr put0
	ldy #JW_FStyle
	lda [Self],y
	pha
	ldy #JW_Font
	lda [Self],y
	pha
	pei (StrP+2)
	pei (StrP)
	jsr @_FL_extStrX
	tsc
	clc
	adc #8
	tcs
	stx Temp
	
	pei (YUp)
	pei (Temp)
	jsr @_GfxSetPen
	pla
	pla
	
	ldy #Line_MaxPoint
	lda [Upto],y
	tax
	ldy #JW_XSize
	lda [Self],y
	sec
	sbc Temp
	bcc nopad
	beq nopad
	phx
	pha
	pea ^TxtStr
	pea !TxtStr
	jsr @_GfxString
	pla
	pla
	pla
	pla
	
nopad	ldy #Line_MaxPoint
	lda [Upto],y
	clc
	adc YUp
	sta YUp
	ldy #JW_YSize
	cmp [Self],y
	bcs exeet
	inc LineUp
	lda Upto
	clc
	adc #Line_SIZE
	sta Upto
	bcc noinc2
	inc Upto+2
noinc2	brl nextline

noline	pei (YUp)
	pea 0
	jsr @_GfxSetPen
	pla
	pla

	ldy #JW_YSize
	lda [Self],y
	sec
	sbc YUp
	pha
	ldy #JW_XSize
	lda [Self],y
	pha
	pea ^TxtStr
	pea !TxtStr
	jsr @_GfxString
	pla
	pla
	pla
	pla

exeet	!POST LZ
	rtl
	
put0	pea 0
	jsr @_GfxChar
	pla
	rts
	
TxtStr	.byte GFX_Box
	.byte "%d%d"
	.byte 0
	.byte "%E"
	
TxtStr2	.byte GFX_Text
	.byte "%E"

	.)

/* Append a string to the Text Widget */

&_JTxtAppend .(
	.abs 1
PieP	.long 4
BufP	.long 4
LitP	.long 4
LitP2	.long 4
Upto	.word 2
ToGo	.word 2
ToGo2	.word 2
PixSize	.word 2
LastSpace .word 2
LZ	= *-1
	.dsb 5

Self	.long 4
StrP	.long 4
	.text

	!PRO LZ	
	ldy #JW_FStyle
	lda [Self],y
	pha
	ldy #JW_Font
	lda [Self],y
	pha
	jsr @_FL_prepSize
	pla
	pla

	ldy #JTxt_LineTab
	lda [Self],y
	sta LitP
	iny
	iny
	lda [Self],y
	sta LitP+2
	ldy #JTxt_Lines
	lda [Self],y
	bne gotone
	pea 0
	pea Piece_SIZE
	jsr @_malloc
	pla
	pla
	sty PieP+2
	stx PieP
	ldy #Piece_Used
	lda #0
	sta [PieP],y
	ldy #Piece_Last
	lda #1
	sta [PieP],y
	
	ldy #Line_Piece
	lda PieP
	sta [LitP],y
	ldy #Line_Piece+2
	lda PieP+2
	sta [LitP],y
	lda #0
	ldy #Line_PieceIn
	sta [LitP],y
	ldy #Line_LineSz
	sta [LitP],y
	jsr @FL_getYSize
	ldy #Line_MaxPoint
	sta [LitP],y
	ldy #JView_MaxY
	sta [Self],y
	txa
	ldy #Line_BotLine
	sta [LitP],y
	
	pei (PieP+2)
	pei (PieP)
	pea 0
	pea 0
	pea 0
	pea 0
	jsr @_addQueue
	!POP 12
	
	ldy #JTxt_Lines
	lda [Self],y
	inc
	sta [Self],y
	
gotone	dec
	!CALC_LINE
	adc LitP
	sta LitP2
	lda LitP+2
	adc #0
	sta LitP2+2
	

	/* Find end of last line */
	
	ldy #Line_LineSz
	lda [LitP2],y
	jsr findpos
	
	lda #Piece_Buf
	clc
	adc Upto
	adc PieP
	sta BufP
	lda PieP+2
	adc #0
	sta BufP+2
	stz Upto

	/* The main add to piece loop */

	ldy #Piece_Used
	lda [PieP],y
	tax
	ldy #0
morecopy	lda [StrP],y
	and #$ff
	beq eostr
	!AS
	sta [BufP],y
	!AL
	inc Upto
	inx
	iny
	cpx #Piece_BUFSIZ
	bcc morecopy
	bra addpiece

eostr	txa
	ldy #Piece_Used
	sta [PieP],y
	lda Upto
	ldy #Line_LineSz
	clc
	adc [LitP2],y
	sta [LitP2],y
	brl wraplines
	
addpiece	tya
	clc
	adc StrP
	sta StrP
	bcc noinc
	inc StrP+2
noinc	lda #Piece_BUFSIZ
	ldy #Piece_Used
	sta [PieP],y
	ldy #Piece_Last
	lda #0
	sta [PieP],y
	pea 0
	pea Piece_SIZE
	jsr @_malloc
	pla
	pla
	phy
	phx
	ldy #Piece_Next+2
	lda [PieP],y
	pha
	ldy #Piece_Next
	lda [PieP],y
	pha
	lda 5,s
	sta PieP
	lda 7,s
	sta PieP+2
	pei (PieP+2)
	pei (PieP)
	lda PieP
	clc
	adc #Piece_Buf
	sta BufP
	lda PieP+2
	adc #0
	sta BufP+2
	ldy #Piece_Used
	lda #0
	sta [PieP],y
	ldy #Piece_Last
	lda #1
	sta [PieP],y
	jsr @_addQueue
	tsc
	clc
	adc #12
	tcs
	ldy #0
	tyx
	brl morecopy

wraplines	
wrapagain	
	lda #0
	jsr findpos
	ldy #Line_LineSz
	lda [LitP2],y
	sta ToGo2
	beq nomore
	lda #-1
	sta LastSpace
	lda Upto
	stz Upto
	stz PixSize

nextpie	pha
	clc
	adc #Piece_Buf
	adc PieP
	sta BufP
	lda PieP+2
	adc #0
	sta BufP+2
	
	ldy #Piece_Used
	lda [PieP],y
	sec
	sbc 1,s
	tax
	pla

moreloop	
	dex
	bmi donepie
	dec ToGo2
	bmi nomore
	inc Upto
	lda [BufP]
	!INP BufP
	and #$ff
	cmp #10
	beq forcenew
	cmp #" "
	bcc moreloop
	bne notsp
	ldy Upto
	sty LastSpace
notsp	tay
	phx
	jsr @FL_getXSize
	plx
	clc
	adc PixSize
	sta PixSize
	ldy #JTxt_XWidth
	cmp [Self],y
	bcc moreloop
	lda LastSpace
	cmp #-1
	bne gotsp
	lda Upto
	beq alzer
	dec
alzer	sta LastSpace
gotsp	jsr dowrap
	bra wrapagain
nomore	brl exeet	
		
donepie	ldy #Piece_Next
	lda [PieP],y
	tax
	ldy #Piece_Next+2
	lda [PieP],y
	sta PieP+2
	stx PieP
	lda #0
	bra nextpie
	
forcenew	lda Upto
;	ldy #Line_LineSz
;	sta [LitP2],y
	sta LastSpace
	jsr dowrap
	brl wrapagain
	
dowrap	ldy #Line_LineSz
	lda [LitP2],y
	sec
	sbc LastSpace
	pha
	lda LastSpace
	ldy #Line_LineSz
	sta [LitP2],y
	jsr findpos
	ldy #JTxt_Lines
	lda [Self],y
	inc
	sta [Self],y
	ldy #JTxt_AcLines
	cmp [Self],y
	bcc glines
	brl morelines
glines	lda LitP2
	clc
	adc #Line_SIZE
	sta LitP2
	lda LitP2+2
	adc #0
	sta LitP2+2
gotline	pla
	ldy #Line_LineSz
	sta [LitP2],y
	lda PieP+2
	ldy #Line_Piece+2
	sta [LitP2],y
	lda PieP
	ldy #Line_Piece
	sta [LitP2],y
	lda Upto
	ldy #Line_PieceIn
	sta [LitP2],y
	jsr @FL_getYSize
	ldy #Line_MaxPoint
	sta [LitP2],y
	txa
	ldy #Line_BotLine
	sta [LitP2],y
	
	ldy #Line_MaxPoint
	lda [LitP2],y
	clc
	ldy #JView_MaxY
	adc [Self],y
	sta [Self],y
	iny
	iny
	lda #0
	adc [Self],y
	sta [Self],y
	rts
	
morelines	
	pea 0
	ldy #JTxt_AcLines
	lda [Self],y
	asl
	sta [Self],y
	!CALC_LINE
	pha
	pei (LitP+2)
	pei (LitP)
;	!POUT "Realloc txt %lx %lx\n"
	jsr @_realloc
	tsc
	clc
	adc #8
	tcs
	tya
	ldy #JTxt_LineTab+2
	sta [Self],y
	sta LitP+2
	txa
	ldy #JTxt_LineTab
	sta [Self],y
	sta LitP
	ldy #JTxt_Lines
	lda [Self],y
	dec
	!CALC_LINE
	adc LitP
	sta LitP2
	lda LitP+2
	adc #0
	sta LitP2+2
	brl gotline

exeet	pei (Self+2)
	pei (Self)
	ldy #JView_Scroller+2
	lda [Self],y
	pha
	dey
	dey
	lda [Self],y
	pha
	ldx #MJScr_Sync
	jsr @VMCheck
	!POP 4
	jsr @_JWReDraw
	!POST LZ+4
	rtl


findpos	.(
	clc
	ldy #Line_PieceIn
	adc [LitP2],y
	sta Upto
	ldy #Line_Piece
	lda [LitP2],y
	sta PieP
	iny
	iny
	lda [LitP2],y
	sta PieP+2
	lda Upto
	beq goteol
	
eoloop	ldy #Piece_Used
	lda Upto
	sec
	sbc [PieP],y
	bcc goteol
	beq chklast
notlast	sta Upto
	ldy #Piece_Next
	lda [PieP],y
	tax
	iny
	iny
	lda [PieP],y
	sta PieP+2
	stx PieP
	bra eoloop
	
chklast	ldy #Piece_Last
	lda [PieP],y
	beq notlast		
goteol	rts
	.)

	.)

&_JTxtScrolled
	.(
	.abs 1
LinP	.long 4
LineUp	.word 2
LZ	= *-1
	.dsb 5

Self	.long 4
ScrX	.long 4
ScrY	.long 4
	.text

	!PRO LZ
	ldy #JTxt_LineTab
	lda [Self],y
	sta LinP
	iny
	iny
	lda [Self],y
	sta LinP+2
	stz LineUp
	ldy #JTxt_Lines
	lda [Self],y
	bne nxlino
	stz ScrY
	bra foundim
nxlino	lda ScrY
	ora ScrY+2
	beq foundim
	lda ScrY
	sec
	ldy #Line_MaxPoint
	sbc [LinP],y
	bcc foundim
	sta ScrY
	lda ScrY+2
	sbc #0
	sta ScrY+2
	lda LinP
	clc
	adc #Line_SIZE
	sta LinP
	!ics LinP+2
	inc LineUp
	ldy #JTxt_Lines
	lda LineUp
	cmp [Self],y
	bcc nxlino
	dec LineUp
	stz ScrY
	
foundim	lda LineUp
	ldy #JTxt_LineTop
	sta [Self],y
	lda ScrY
	eor #$ffff
	inc
	ldy #JTxt_YTop
	sta [Self],y
	pei (Self+2)
	pei (Self)
	jsr @_JWReDraw
	!POP 4
exeet	!POST LZ
	rtl
	
	.)	
	
	!PRPCLASS JTxt
	
JTxtMethods .(
	jmp (Methods,x)
Methods	.long _JCntInit	; Init
	.long _JCntKill	; Destory
	.long _JTxtDraw	; Draw
	.long _JCntShow	; Show
	.long _JCntHide	; Hide
	.long _JCntHandle	; Handle
	.long _JTxtNotify	; Notify
	.long _JWGetHints ; Notify

	.long _JCntKeyD	; A key down
	.long _JWButton	; Button 
	.long _JWRButton ; Right button (menu)
	.long _JWMotion	; Motion
	.long _JWBound	; Boundary
	.long _JWNotice	; Notice

	.long _JCntAdd	; Add
	.long _JCntRemove ; Remove
	.long _JCntLayout
	
	.long _JTxtScrolled ; scrolled
	
	.)

	.)
	
