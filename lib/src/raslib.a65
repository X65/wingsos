	
	.text
	.pic
/* 

Raster interrupt library 
------------------------------

---------------------------------------

*/

	.(

	.al
	.xl
	
	.include	<kern.i65>
	.include	<stdio.i65>
	.include 	<syscalls.i65>
	.include 	<chips.i65>
	.include	<con.i65>
	.include	<termio.i65>


&_getRaster	.(
	jsr @S_getRast
	rtl
	.)
	
&_freeRaster .(
	!AS
	lda #1
	sta @VIC_IRR
	lda #0
	sta @VIC_IMR
	!AL
	ldx #{Stack
	jsr @S_segoff
	tax
	lda Stack,x
	jsr @S_kfree
	lda #0
	jsr @S_setRast
	rtl
	.)
	
&_setRaster	.(

LZ	= 0

Rute	= LZ + 6
RastLine	= LZ + 10
	
	phd
	tsc
	tcd
	ldx #!RastRute
	ldy #^RastRute
	lda #1
	jsr @S_setRast
	lda Rute
	ora Rute+2
	beq nochange
	!AS
	phb
	pla
	sta @curseg
	!AL
	ldx #{IntRute
	jsr @S_segoff
	sta @curoff
	tax
	lda Rute
	sta IntRute,x
	lda Rute+2
	sta IntRute+2,x
	phx
	lda #200
	jsr @S_kalloc
	ply
	txa
	sta Stack,y
	
nochange lda RastLine
	!AS
	sta @VIC_RASTER
	lda RastLine+1
	beq norl
	lda #$80
	sta RastLine+1
norl	lda @VIC_CR1
	and #$7f
	ora RastLine+1
	sta @VIC_CR1
	sta @D011
	lda #1
	sta @VIC_IRR
	sta @VIC_IMR
	!AL
	pld
	rtl
	
	.)

&_setD011	.(
	!AS
&D011	= * + 1
	lda #0
	and #$80
	ora 4,s
	sta @VIC_CR1
	!AL
	rtl
	.)
	
&_stopRaster .(

	!AS
	lda #1
	sta @VIC_IRR
	lda #0
	sta @VIC_IMR
	!AL
	rtl
	
	.)

RastRute	.(
	
	.as
	.xl
	phb
&curseg	= * + 1
	lda #0
	pha
	plb
	!AL
	phy
	phx
&curoff	= * + 1
	ldy #0
	tsx
	lda Stack,y
	clc
	adc #198
	tcs
	phx
	lda IntRute+2,y
	ldx IntRute,y
	jsr @__callxa
	pla
	tcs
	plx
	ply
	plb
	rtl
	.)

&_initKey	.(

	lda #1
	sta @NoKeyW2
	!AS
	lda #$ff
	sta @CIA1+DDRA
	lda #$00
	sta @CIA1+DDRB
	!AL
	rtl
	
	.)

&_cli	.(
	cli
	rtl
	.)

&_sei	.(
	sei
	rtl
	.)
		
&_scanKey	.(
	
ShifDown	= 1
Char	= 3
CurCh	= 5
NoKeyWait	= 7
LZ	= 8

CtrlP	= LZ + 6

	phd
	tsc
	sec
	sbc #LZ
	tcs
	tcd
	lda #0
	stz ShifDown
	!AXS
	lda @NoKeyW2
	sta NoKeyWait
	lda @CurCh2
	sta CurCh
	lda #$60
	sta Char
	lda #$ff
	sta @CIA1+PRA
	sta @$d02f
deb5	lda @CIA1+PRB
	cmp @CIA1+PRB
	bne deb5
	cmp #$ff
	beq good
	brl exKey
good	lda #$7f
	sta @CIA1+PRA
	lda #$ff
	sta @$d02f
deb1	lda @CIA1+PRB
	cmp @CIA1+PRB
	bne deb1
	and #32
	bne nocbm
	lda #2
	sta ShifDown
nocbm	lda #$ff-2
	sta @CIA1+PRA
deb2	lda @CIA1+PRB
	cmp @CIA1+PRB
	bne deb2
	and #128
	bne noshi1
	lda #1
	ora ShifDown
	sta ShifDown
noshi1	lda #$ff-64
	sta @CIA1+PRA
deb3	lda @CIA1+PRB
	cmp @CIA1+PRB
	bne deb3
	and #16
	bne noshi2
	lda #1
	ora ShifDown
	sta ShifDown	
noshi2	ldx #11
findKey	dex
	bmi doneKey
	lda @Tab,x
	cpx #8
	bcc nork
	sta @$d02f
	lda #$ff
	bra skipt
nork	pha
	lda #$ff
	sta @$d02f
	pla
skipt	sta @CIA1+PRA
deb4	lda @CIA1+PRB
	cmp @CIA1+PRB
	bne deb4
	pha
	ora @Ignore,x	; keys lifted no longer ignored
	sta @Ignore,x
	pla
	eor #$ff
	and @Ignore,x
	and @AIgnore,x	; Always ignore Shift and CBM
	beq findKey
	pha
	txa
	asl
	asl
	asl
	dec
	tay
	pla 
fione	cmp #0
	beq findKey
	iny
	lsr
	bcc fione
	sty Char
	cpy CurCh
	beq fione
	
doneKey	lda Char
	cmp #$60
	bne isKey
	lda #$60
	sta CurCh
	stz NoKeyWait
waino	brl exKey

isKey	ldx NoKeyWait
	bne waino
	cmp CurCh
	bne ignold
	
	lda @ShifCur	; same key, check if same shift/cbm
	cmp ShifDown
	beq nold

badone	lda #$60		; chift/cbm changed
	sta Char
ignold	lda CurCh		; ignore the current key
	cmp #$60
	beq nold
	lsr
	lsr
	lsr
	pha
	lda CurCh
	and #7
	tax
	lda @Tab,x
	plx
	and @Ignore,x
	sta @Ignore,x 
	
nold	ldx Char
	cpx #$60
	bne isKey2
	brl exKey
	
isKey2	stx CurCh
	!AXL
	txa
	and #$ff
	asl
	asl
	clc
	adc ShifDown
	tax
	!AS
	lda @Ascii,x
	tax 
exeet	lda NoKeyWait
	sta @NoKeyW2
	lda CurCh
	sta @CurCh2 
	lda #$ff
	sta @$d02f
	sta @CIA1+PRA
	!AXL
	txa
	and #$ff
	tax
	lda ShifDown
	and #$ff
	sta @ShifCur
	sta [CtrlP]
	tsc
	clc
	adc #LZ
	tcs
	pld
	rtl
	
	.as
	.xs
exKey	ldx #0
	bra exeet
	
	.)
		

Ignore	.byte $ff,$ff,$ff,$ff, $ff,$ff,$ff,$ff, $ff,$ff,$ff
AIgnore	.byte $ff,$7f,$ff,$ff, $ff,$ff,$ef,$df, $ff,$ff,$ff ; ignore always

CurCh2	.byte 0
ShifCur	.word 0
NoKeyW2	.word 0

Tab	.byte $ff-1,$ff-2,$ff-4,$ff-8,$ff-$10,$ff-$20,$ff-$40,$ff-$80
	.byte $ff-1,$ff-2,$ff-4

Ascii	.byte BS, INST, BS, INST	; delete
	.byte CR, CR, CR, CR		; return
	.byte CURR, CURL, PGUP, PGUP	; right
	.byte F7, F8, F7, F8		; f7
	.byte F1, F2, F1, F2		; f1
	.byte F3, F4, F3, F4		; f3
	.byte F5, F6, F5, F6		; f5
	.byte CURD, CURU, PGDN, PGDN	; down
	
	.byte "3#3#"	; 3
	.byte "wW", $17,$17	; w
	.byte "aA", 1,1	; a
	.byte "4$4$"	; 4
	.byte "zZ", $1a, $1a	; z
	.byte "sS", $13, $13	; s
	.byte "eE", $05, $05	; e
	.byte 0,0,0,0	; SHIFT

	.byte "5%5%"	; 5
	.byte "rR", $12, $12	; r
	.byte "dD", $04, $04	; d
	.byte "6&6&"	; 6
	.byte "cC", $03, $03	; c
	.byte "fF", $06, $06	; f
	.byte "tT", $14, $14	; t
	.byte "xX", $18, $18	; x
	
	.byte "7'7'"	; 7
	.byte "yY", $19, $19	; y
	.byte "gG", $07, $07	; g
	.byte "8(8("	; 8
	.byte "bB", $02, $02	; b
	.byte "hH", $08, $08	; h
	.byte "uU", $15, $15	; u
	.byte "vV", $16, $16	; v
	
	.byte "9)9)"	; 9
	.byte "iI", $09, $09	; i
	.byte "jJ", $0a, $0a	; j
	.byte "0{0{"	; 0
	.byte "mM", $0d, $0d	; m
	.byte "kK", $0b, $0b	; k
	.byte "oO", $0f, $0f	; o
	.byte "nN", $0e, $0e	; n
	
	.byte "+{+{"	; +
	.byte "pP", $10, $10	; p
	.byte "lL", $0c, $0c	; l
	.byte "-}-}"	; -
	.byte ".>.>"	; .
	.byte ":[:["	; :
	.byte "@_", 0, $1f	; @
	.byte ",<,<"	; ,
	
	.byte "\\|", $1c, $1c	; pound
	.byte "****"	; *
	.byte ";]", $1d, $1d	; ;
	.byte HOME, HOME, END, END ; CLR/HOME
	.byte 0,0,0,0	; shift
	.byte "===="	; =
	.byte "^^", $1e, $1e	; up arrow
	.byte "/?/?"	; /
	
	.byte "1!1!"	; 1
	.byte "`~", ESC, ESC	; Left arrow
	.byte TAB, TAB, TAB, TAB ; ctrl
	.byte "2\"2\""	; 2
	.byte "    "	; space
	.byte 0,0,0,0	; c=
	.byte "qQ", $11, $11	; q
	.byte $03, $03, $03, $03 ; run/stop
	
	.byte 0,0,0,0	; help
	.byte "8888"	; 8
	.byte "5555"	; 5
	.byte TAB,TAB,TAB,TAB	; TAB
	.byte "2222"	; 2
	.byte "4444"	; 4
	.byte "7777"	; 7
	.byte "1111"	; 1
	
	.byte ESC,ESC,ESC,ESC	; ESC
	.byte "++++"	; +
	.byte "----"	; -
	.byte LF, LF, LF, LF	; LF
	.byte CR, CR, CR, CR	; CR
	.byte "6666"	; 6
	.byte "9999"	; 9
	.byte "3333"	; 3
	
	.byte 0,0,0,0	; ALT
	.byte "0000"	; 0
	.byte "...."    ; .
	.byte CURU,CURU,CURU,CURU ; up
	.byte CURD,CURD,CURD,CURD ; down
	.byte CURL,CURL,CURL,CURL ; left
	.byte CURR,CURR,CURR,CURR ; right
	.byte 0,0,0,0	; NOSCROLL

	.data
IntRute	.word 0,0
Stack	.word 0

	.)
